#!/usr/bin/env python3
"""
üîç DIAGNOSTIC OCR WINDOWS POUR RTPA
Script de diagnostic pour v√©rifier pourquoi l'OCR ne fonctionne pas sur Windows
"""

import os
import sys
import platform
import psutil
from pathlib import Path

def diagnostic_windows_ocr():
    """Diagnostic complet OCR Windows"""
    
    print("üîç DIAGNOSTIC OCR WINDOWS - RTPA")
    print("=" * 50)
    
    # 1. V√©rification environnement
    print("\n1Ô∏è‚É£ ENVIRONNEMENT:")
    print(f"   OS: {platform.system()} {platform.release()}")
    print(f"   Python: {sys.version}")
    print(f"   Architecture: {platform.architecture()[0]}")
    
    # 2. V√©rification Winamax
    print("\n2Ô∏è‚É£ D√âTECTION WINAMAX:")
    winamax_processes = []
    try:
        for proc in psutil.process_iter(['pid', 'name', 'exe']):
            try:
                if 'winamax' in proc.info['name'].lower():
                    winamax_processes.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'exe': proc.info['exe']
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
                
        if winamax_processes:
            print("   ‚úÖ Winamax d√©tect√©:")
            for proc in winamax_processes:
                print(f"      ‚Ä¢ PID {proc['pid']}: {proc['name']}")
        else:
            print("   ‚ùå Aucun processus Winamax trouv√©")
            print("   üîß SOLUTION: Ouvrez Winamax et lancez une table")
            
    except Exception as e:
        print(f"   ‚ùå Erreur d√©tection: {e}")
    
    # 3. V√©rification d√©pendances OCR
    print("\n3Ô∏è‚É£ D√âPENDANCES OCR:")
    
    required_modules = [
        'mss', 'cv2', 'pytesseract', 'numpy', 'PIL'
    ]
    
    for module in required_modules:
        try:
            if module == 'cv2':
                import cv2
                print(f"   ‚úÖ OpenCV: {cv2.__version__}")
            elif module == 'mss':
                import mss
                # Test rapide de capture
                try:
                    with mss.mss() as sct:
                        screenshot = sct.grab({'top': 0, 'left': 0, 'width': 100, 'height': 100})
                    print(f"   ‚úÖ MSS: Capture d'√©cran OK")
                except Exception as e:
                    print(f"   ‚ùå MSS: Erreur capture - {e}")
            elif module == 'pytesseract':
                import pytesseract
                # V√©rifier Tesseract
                try:
                    version = pytesseract.get_tesseract_version()
                    print(f"   ‚úÖ Tesseract: {version}")
                except Exception as e:
                    print(f"   ‚ùå Tesseract non trouv√©: {e}")
                    print("   üîß SOLUTION: Installez Tesseract-OCR")
            else:
                __import__(module)
                print(f"   ‚úÖ {module}: OK")
                
        except ImportError:
            print(f"   ‚ùå {module}: MANQUANT")
            print(f"   üîß SOLUTION: pip install {module}")
    
    # 4. Test capture d'√©cran basique
    print("\n4Ô∏è‚É£ TEST CAPTURE D'√âCRAN:")
    try:
        import mss
        import numpy as np
        
        with mss.mss() as sct:
            # Capture petite zone pour test
            region = {'top': 100, 'left': 100, 'width': 200, 'height': 100}
            screenshot = sct.grab(region)
            img = np.array(screenshot)
            
            print(f"   ‚úÖ Capture r√©ussie: {img.shape}")
            print(f"   üìä R√©solution √©cran: {sct.monitors[1]['width']}x{sct.monitors[1]['height']}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur capture: {e}")
    
    # 5. Configuration RTPA
    print("\n5Ô∏è‚É£ CONFIGURATION RTPA:")
    
    # V√©rifier variables d'environnement
    rtpa_vars = [
        'RTPA_FORCE_REAL_CAPTURE',
        'DISPLAY'
    ]
    
    for var in rtpa_vars:
        value = os.getenv(var)
        if value:
            print(f"   ‚Ä¢ {var}={value}")
        else:
            print(f"   ‚Ä¢ {var}: Non d√©fini")
    
    # 6. Recommandations
    print("\n6Ô∏è‚É£ RECOMMANDATIONS:")
    print("   üîß Pour activer l'OCR sur Windows:")
    print("   1. Ouvrez Winamax")
    print("   2. Lancez une table de poker")
    print("   3. D√©finissez: set RTPA_FORCE_REAL_CAPTURE=true")
    print("   4. Relancez: python rtpa.py")
    print("   5. V√©rifiez les messages de debug dans la console")
    
    print("\n‚úÖ Diagnostic termin√©!")
    print("üìß Si le probl√®me persiste, partagez ces informations")

if __name__ == "__main__":
    diagnostic_windows_ocr()