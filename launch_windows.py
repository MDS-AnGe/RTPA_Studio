#!/usr/bin/env python3
"""
üöÄ LANCEUR RTPA STUDIO POUR WINDOWS
Lanceur sp√©cialis√© pour environnement Windows avec capture OCR temps r√©el
"""

import os
import sys
import platform
import subprocess

def check_windows_requirements():
    """V√©rifie les pr√©requis Windows"""
    print("üîç V√©rification environnement Windows...")
    
    if platform.system() != 'Windows':
        print("‚ùå Ce lanceur est sp√©cialement con√ßu pour Windows")
        return False
    
    print("‚úÖ Syst√®me Windows d√©tect√©")
    
    # V√©rifier Python
    python_version = sys.version_info
    if python_version.major < 3 or python_version.minor < 8:
        print(f"‚ùå Python 3.8+ requis (trouv√©: {python_version.major}.{python_version.minor})")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor} OK")
    
    # V√©rifier d√©pendances critiques
    required_modules = ['mss', 'cv2', 'numpy', 'PIL', 'psutil']
    missing_modules = []
    
    for module in required_modules:
        try:
            if module == 'cv2':
                import cv2
            elif module == 'PIL':
                import PIL
            else:
                __import__(module)
            print(f"‚úÖ {module}: OK")
        except ImportError:
            missing_modules.append(module)
            print(f"‚ùå {module}: MANQUANT")
    
    if missing_modules:
        print(f"\nüîß Installez les d√©pendances manquantes:")
        print(f"pip install {' '.join(missing_modules)}")
        if 'cv2' in missing_modules:
            print("pip install opencv-python")
        return False
    
    return True

def check_tesseract():
    """V√©rifie Tesseract OCR"""
    try:
        import pytesseract
        version = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract OCR: {version}")
        return True
    except Exception as e:
        print(f"‚ùå Tesseract OCR non trouv√©: {e}")
        print("üîß T√©l√©chargez: https://github.com/UB-Mannheim/tesseract/wiki")
        return False

def launch_rtpa():
    """Lance RTPA Studio avec configuration Windows"""
    print("\nüöÄ Lancement RTPA Studio pour Windows...")
    
    # Forcer la capture d'√©cran r√©elle
    os.environ['RTPA_FORCE_REAL_CAPTURE'] = 'true'
    os.environ['RTPA_WINDOWS_MODE'] = 'true'
    
    # Lancer RTPA
    try:
        import rtpa
        print("‚úÖ RTPA Studio d√©marr√© avec capture OCR temps r√©el")
    except Exception as e:
        print(f"‚ùå Erreur d√©marrage RTPA: {e}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üéØ RTPA STUDIO - LANCEUR WINDOWS")
    print("=" * 50)
    
    # V√©rifications pr√©requis
    if not check_windows_requirements():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    if not check_tesseract():
        input("\nAppuyez sur Entr√©e pour quitter...")
        return
    
    print("\n‚úÖ Tous les pr√©requis sont satisfaits")
    print("\nüìã INSTRUCTIONS UTILISATION:")
    print("1. Ouvrez Winamax")
    print("2. Lancez une table de poker")
    print("3. RTPA d√©tectera automatiquement la table")
    print("4. Les donn√©es OCR appara√Ætront en temps r√©el")
    
    input("\nAppuyez sur Entr√©e pour d√©marrer RTPA...")
    
    # Lancement
    if launch_rtpa():
        print("üéâ RTPA Studio lanc√© avec succ√®s !")
    else:
        print("‚ùå √âchec du lancement")
        input("\nAppuyez sur Entr√©e pour quitter...")

if __name__ == "__main__":
    main()