"""
Interface graphique principale pour RTPA Studio avec CustomTkinter
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, font
import threading
import time
import os
import json
import subprocess
from pathlib import Path

# Configuration CustomTkinter
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class RTAPGUIWindow:
    def __init__(self, app_manager=None):
        """Initialisation de l'interface graphique RTPA Studio"""
        self.app_manager = app_manager
        self.update_thread = None
        self.running = False
        
        # Configuration de la fen√™tre principale
        self.root = ctk.CTk()
        self.root.title("RTPA Studio")
        self.root.geometry("1100x900")  # R√©duit de 1400 √† 1100
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # Configuration couleurs plus claires
        ctk.set_appearance_mode("light")  # Mode clair pour √©viter les zones noires
        
        # Variables de th√®me
        self.accent_color = "blue"
        self.font_family = "Arial"
        self.opacity = 1.0
        
        # Type de table actuel pour g√©rer l'affichage des devises
        self.current_table_type = "cashgame"
        
        # Charger logo si disponible
        self.logo = None
        self.logo_image = None
        self.load_logo()
        
        # Configuration du style
        self.setup_styles()
        
        # Interface utilisateur
        self.create_widgets()
        
        # Variables de statut
        self.current_connection_status = "waiting"  # waiting, active, error
        self.current_activity = "training"  # Commencer avec training car CFR est toujours actif
        self.current_platform = None  # Plateforme actuellement connect√©e
        
        # D√©marrer la mise √† jour du statut
        self._update_status_display()
        
        # Connecter aux √©v√©nements r√©els du syst√®me
        self._connect_to_system_events()
        
        # D√©marrage auto-d√©tection (si disponible)
        if self.app_manager and hasattr(self.app_manager, 'start_platform_detection'):
            self.app_manager.start_platform_detection()
        
    def load_logo(self):
        """Charge le logo et l'ic√¥ne si disponibles"""
        # Logo principal
        logo_path = "attached_assets/RTPA_Studio_logo_1757263280355.png"
        if os.path.exists(logo_path):
            try:
                from PIL import Image
                self.logo_image = ctk.CTkImage(
                    light_image=Image.open(logo_path),
                    dark_image=Image.open(logo_path),
                    size=(200, 60)  # Taille adapt√©e au logo horizontal
                )
                self.logo = True
            except Exception as e:
                print(f"Erreur chargement logo: {e}")
                self.logo = None
        
        # Ic√¥ne de fen√™tre
        icon_path = "attached_assets/RTPA_Studio_icon_1757263280355.ico"
        if os.path.exists(icon_path):
            try:
                self.root.iconbitmap(icon_path)
            except Exception as e:
                # Fallback avec l'ic√¥ne PNG
                icon_png = "attached_assets/RTPA_Studio_icon_1024_1757263280355.png"
                if os.path.exists(icon_png):
                    try:
                        from PIL import Image
                        icon_img = Image.open(icon_png)
                        icon_photo = tk.PhotoImage(icon_img.resize((64, 64)))
                        self.root.iconphoto(True, icon_photo)
                    except Exception:
                        pass
    
    def setup_styles(self):
        """Configuration des styles CustomTkinter"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Couleurs harmonis√©es - tons beige/cr√®me correspondant au th√®me CustomTkinter
        bg_color = "#dbdbdb"  # Couleur de fond CustomTkinter par d√©faut en mode dark
        fg_color = "#212529"  # Noir doux pour le texte
        accent = "#1f538d"
        card_bg = "#dbdbdb"   # Beige pour les cartes
        
        # Styles des frames
        self.style.configure('Card.TFrame', background=bg_color, relief='raised', borderwidth=1)
        self.style.configure('Heading.TLabel', background=bg_color, foreground=fg_color, font=(self.font_family, 11, 'bold'))
        self.style.configure('Card.TLabel', background=bg_color, foreground=fg_color, font=(self.font_family, 10))
        
        # Styles pour les onglets
        self.style.configure('TNotebook', background=bg_color)
        self.style.configure('TNotebook.Tab', background=bg_color, foreground=fg_color)
        
        # Configuration de la fen√™tre principale
        self.root.configure(bg=bg_color)
    
    def create_widgets(self):
        """Cr√©ation de l'interface utilisateur"""
        
        # Frame principal
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # En-t√™te avec logo et titre
        header_frame = ctk.CTkFrame(self.main_frame)
        header_frame.pack(fill='x', pady=(0, 10))
        
        if self.logo:
            logo_label = ctk.CTkLabel(header_frame, image=self.logo_image, text="")
            logo_label.pack(side='left', padx=(10, 20))
        
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.pack(side='left', fill='both', expand=True)
        
        # Titre sur une ligne avec partie en gras et partie en normal
        title_line_frame = ctk.CTkFrame(title_frame, fg_color="transparent")
        title_line_frame.pack(anchor='w')
        
        ctk.CTkLabel(title_line_frame, text="Real-Time Poker Assistant ", font=ctk.CTkFont(size=24, weight="bold")).pack(side='left')
        ctk.CTkLabel(title_line_frame, text="(CFR/Nash)", font=ctk.CTkFont(size=24, weight="normal")).pack(side='left')
        ctk.CTkLabel(title_frame, text="avec Intelligence Artificielle", 
                    font=ctk.CTkFont(size=14)).pack(anchor='w')
        
        # Contr√¥les et statut (en-t√™te droite)
        self.controls_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        self.controls_frame.pack(side='right', padx=(20, 10))
        
        # Ligne 1: √âtat de connexion (rouge/vert) - Plus gros
        self.connection_status_label = ctk.CTkLabel(
            self.controls_frame,
            text="En attente de plateforme",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="#ff6b6b"  # Rouge par d√©faut
        )
        self.connection_status_label.pack(pady=(3, 0))
        
        # Ligne 2: Activit√© du syst√®me - Espacement ultra-r√©duit
        self.activity_status_label = ctk.CTkLabel(
            self.controls_frame,
            text="Surveillance active",
            font=ctk.CTkFont(size=13),
            text_color="#666666"  # Gris plus fonc√© pour meilleure lisibilit√©
        )
        self.activity_status_label.pack(pady=(1, 0))
        
        # Ligne 3: Temps restant CFR - Coll√© √† la ligne pr√©c√©dente
        self.cfr_time_label = ctk.CTkLabel(
            self.controls_frame,
            text="",
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color="black"  # Noir pour meilleure lisibilit√©
        )
        self.cfr_time_label.pack(pady=(1, 3))
        
        # Notebook avec onglets
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # Onglet 1: Tableau de Bord (principal)
        self.dashboard_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.dashboard_tab, text="üìä Tableau de Bord")
        self.create_dashboard_tab()
        
        # Onglet 2: Options
        self.options_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.options_tab, text="‚öôÔ∏è Options")
        self.create_options_tab()
        
        # Onglet 3: Param√®tres
        self.settings_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_tab, text="üîß Param√®tres")
        self.create_settings_tab()
        
        # Onglet 4: Performance
        self.performance_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.performance_tab, text="‚ö° Performance")
        self.create_performance_tab()
        
        # Onglet 5: Version (dernier √† droite)
        self.version_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.version_tab, text="üìå Version")
        self.create_version_tab()
    
    def create_dashboard_tab(self):
        """Cr√©ation de l'onglet Tableau de Bord complet (√©tat du jeu + recommandations + statistiques)"""
        
        # Frame principal optimis√© (plus compact)
        main_container = ttk.Frame(self.dashboard_tab)
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # SECTION 1: CARTES (Main et Board c√¥te √† c√¥te)
        cards_container = ttk.Frame(main_container)
        cards_container.pack(fill='x', pady=(0, 10))
        
        # Section Main (compacte, √† gauche)
        hero_frame = ttk.LabelFrame(cards_container, text="üÇ° Main", style='Card.TFrame')
        hero_frame.pack(side='left', padx=(0, 10), fill='y')
        
        self.hero_cards_frame = tk.Frame(hero_frame, bg='#dbdbdb')
        self.hero_cards_frame.pack(padx=8, pady=10)
        
        # Cartes visuelles Main
        self.hero_card1_frame = tk.Frame(
            self.hero_cards_frame, 
            bg='#dbdbdb', relief='raised', bd=2, width=90, height=120
        )
        self.hero_card1_frame.pack(side='left', padx=5)
        self.hero_card1_frame.pack_propagate(False)
        
        self.hero_card1 = tk.Label(
            self.hero_card1_frame, text="üÇ†", font=('Arial', 28, 'bold'),
            fg='#5a5a5a', bg='#dbdbdb', anchor='center'
        )
        self.hero_card1.pack(expand=True, fill='both')
        
        self.hero_card2_frame = tk.Frame(
            self.hero_cards_frame, bg='#dbdbdb', relief='raised', bd=2, width=90, height=120
        )
        self.hero_card2_frame.pack(side='left', padx=5)
        self.hero_card2_frame.pack_propagate(False)
        
        self.hero_card2 = tk.Label(
            self.hero_card2_frame, text="üÇ†", font=('Arial', 28, 'bold'),
            fg='#5a5a5a', bg='#dbdbdb', anchor='center'
        )
        self.hero_card2.pack(expand=True, fill='both')
        
        # Section Board (√† droite)
        board_frame = ttk.LabelFrame(cards_container, text="üÉè Board", style='Card.TFrame')
        board_frame.pack(side='left', fill='both', expand=True, padx=(10, 0))
        
        board_content = tk.Frame(board_frame, bg='#dbdbdb')
        board_content.pack(fill='both', expand=True, padx=8, pady=6)
        
        self.board_cards_frame = tk.Frame(board_content, bg='#dbdbdb')
        self.board_cards_frame.pack(anchor='center')
        
        # Calculer la largeur optimale pour 5 cartes (90px + padding)
        optimal_board_width = (5 * 90) + (4 * 5) + 16  # 5 cartes + 4 espacements + padding
        
        self.board_cards = []
        self.board_card_frames = []
        for i in range(5):
            card_frame = tk.Frame(
                self.board_cards_frame, bg='#dbdbdb', relief='raised', bd=2, width=90, height=120
            )
            card_frame.pack(side='left', padx=5)
            card_frame.pack_propagate(False)
            
            card_label = tk.Label(
                card_frame, text="üÇ†", font=('Arial', 28, 'bold'),
                fg='#5a5a5a', bg='#dbdbdb', anchor='center'
            )
            card_label.pack(expand=True, fill='both')
            
            self.board_cards.append(card_label)
            self.board_card_frames.append(card_frame)
        
        # SECTION 2: LAYOUT PRINCIPAL AVEC COLONNES
        main_layout = ttk.Frame(main_container)
        main_layout.pack(fill='both', expand=True, pady=(0, 10))
        
        # Colonne gauche: Informations table et recommandations
        left_column = ttk.Frame(main_layout)
        left_column.pack(side='left', fill='both', expand=True, padx=(0, 15))
        
        # SOUS-SECTION: Informations de table
        table_info_frame = ttk.LabelFrame(left_column, text="üìä INFORMATIONS TABLE", style='Card.TFrame')
        table_info_frame.pack(fill='both', expand=True, pady=(0, 5))
        
        table_content = tk.Frame(table_info_frame, bg='#dbdbdb')
        table_content.pack(fill='both', expand=True, padx=8, pady=6)
        
        # POT principal - centr√© et mis en valeur
        pot_container = tk.Frame(table_content, bg='#dbdbdb')
        pot_container.pack(fill='x', pady=(0, 8))
        
        tk.Label(pot_container, text="üí∞ POT ACTUEL", font=('Arial', 11, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.pot_label = tk.Label(pot_container, text=self.format_amount(0), font=('Arial', 20, 'bold'), fg='#28a745', bg='#dbdbdb')
        self.pot_label.pack()
        
        # Ligne blinds et antes - organisation horizontale √©quilibr√©e
        blinds_row = tk.Frame(table_content, bg='#dbdbdb')
        blinds_row.pack(fill='x', pady=(0, 4))
        
        # Blinds section - centr√©e √† gauche
        blinds_container = tk.Frame(blinds_row, bg='#dbdbdb')
        blinds_container.pack(side='left', fill='x', expand=True)
        tk.Label(blinds_container, text="üé≤ Blinds", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.blinds_label = tk.Label(blinds_container, text=f"{self.format_amount(0)} / {self.format_amount(0)}", font=('Arial', 12, 'bold'), fg='#fd7e14', bg='#dbdbdb')
        self.blinds_label.pack()
        
        # Antes section - centr√©e √† droite
        antes_container = tk.Frame(blinds_row, bg='#dbdbdb')
        antes_container.pack(side='right', fill='x', expand=True)
        tk.Label(antes_container, text="‚ö° Antes", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.antes_label = tk.Label(antes_container, text=self.format_amount(0), font=('Arial', 12, 'bold'), fg='#6f42c1', bg='#dbdbdb')
        self.antes_label.pack()
        
        # Type de table - en bas
        self.table_type_label = tk.Label(table_content, text="Cash Game", font=('Arial', 10), fg='#6c757d', bg='#dbdbdb')
        self.table_type_label.pack(pady=(4, 0))
        
        # SOUS-SECTION: Recommandation principale
        rec_frame = ttk.LabelFrame(left_column, text="üéØ RECOMMANDATION", style='Card.TFrame')
        rec_frame.pack(fill='both', expand=True, pady=(0, 5))
        
        rec_content = tk.Frame(rec_frame, bg='#dbdbdb')
        rec_content.pack(fill='both', expand=True, padx=8, pady=6)
        
        # Action principale centr√©e
        action_container = tk.Frame(rec_content, bg='#dbdbdb')
        action_container.pack(fill='x', pady=(0, 8))
        
        self.action_display = tk.Label(action_container, text="---", font=('Arial', 24, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.action_display.pack()
        
        self.bet_size_label = tk.Label(action_container, text="", font=('Arial', 18, 'bold'), fg='#28a745', bg='#dbdbdb')
        self.bet_size_label.pack()
        
        # M√©triques en grille 2x2
        metrics_frame = tk.Frame(rec_content, bg='#dbdbdb')
        metrics_frame.pack(fill='x', pady=(0, 8))
        
        # Ligne 1: Victoire + Risque
        metrics_row1 = tk.Frame(metrics_frame, bg='#dbdbdb')
        metrics_row1.pack(fill='x', pady=(0, 4))
        
        victory_frame = tk.Frame(metrics_row1, bg='#dbdbdb')
        victory_frame.pack(side='left', fill='x', expand=True)
        tk.Label(victory_frame, text="üéØ Victoire", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.win_prob_label = tk.Label(victory_frame, text="--", font=('Arial', 14, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.win_prob_label.pack()
        
        risk_frame = tk.Frame(metrics_row1, bg='#dbdbdb')
        risk_frame.pack(side='right', fill='x', expand=True)
        tk.Label(risk_frame, text="‚ö†Ô∏è Risque", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.risk_label = tk.Label(risk_frame, text="--", font=('Arial', 14, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.risk_label.pack()
        
        # Ligne 2: Confiance seule, centr√©e
        confidence_frame = tk.Frame(metrics_frame, bg='#dbdbdb')
        confidence_frame.pack(fill='x')
        tk.Label(confidence_frame, text="üîÆ Confiance", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.main_confidence_label = tk.Label(confidence_frame, text="--", font=('Arial', 14, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.main_confidence_label.pack()
        
        # Raisonnement optimis√©
        reasoning_frame = tk.Frame(rec_content, bg='#dbdbdb')
        reasoning_frame.pack(fill='both', expand=True)
        tk.Label(reasoning_frame, text="üß† Raisonnement:", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack(anchor='w')
        self.main_reasoning_label = tk.Label(
            reasoning_frame, text="En attente d'analyse...", font=('Arial', 9),
            wraplength=320, justify='left', fg='#6c757d', bg='#dbdbdb'
        )
        self.main_reasoning_label.pack(anchor='w', fill='both', expand=True)
        
        # SOUS-SECTION: Statistiques compactes
        stats_frame = ttk.LabelFrame(left_column, text="üìà STATISTIQUES", style='Card.TFrame')
        stats_frame.pack(fill='x', pady=(0, 5))  # Hauteur fixe pour √©viter les probl√®mes d'affichage
        
        stats_content = tk.Frame(stats_frame, bg='#dbdbdb')
        stats_content.pack(fill='x', padx=6, pady=4)
        
        # Taux de victoire principal - centr√© et plus compact
        main_rate_frame = tk.Frame(stats_content, bg='#dbdbdb')
        main_rate_frame.pack(fill='x', pady=(0, 4))
        
        tk.Label(main_rate_frame, text="üìä TAUX DE VICTOIRE", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.win_rate_value = tk.Label(main_rate_frame, text="0.0%", font=('Arial', 14, 'bold'), fg='#dc3545', bg='#dbdbdb')
        self.win_rate_value.pack()
        
        # Statistiques d√©taill√©es en grille compacte
        details_frame = tk.Frame(stats_content, bg='#dbdbdb')
        details_frame.pack(fill='x', pady=(0, 2))
        
        # Ligne 1: Mains jou√©es + gagn√©es - VISIBLE et bien espac√©
        hands_row = tk.Frame(details_frame, bg='#dbdbdb')
        hands_row.pack(fill='x', pady=(2, 4))  # Plus d'espace vertical
        
        played_frame = tk.Frame(hands_row, bg='#dbdbdb')
        played_frame.pack(side='left', fill='x', expand=True)
        tk.Label(played_frame, text="üé≤ Jou√©es", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.hands_played_value = tk.Label(played_frame, text="0", font=('Arial', 11, 'bold'), fg='#495057', bg='#dbdbdb')
        self.hands_played_value.pack()
        
        won_frame = tk.Frame(hands_row, bg='#dbdbdb')
        won_frame.pack(side='right', fill='x', expand=True)
        tk.Label(won_frame, text="üèÜ Gagn√©es", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.hands_won_value = tk.Label(won_frame, text="0", font=('Arial', 11, 'bold'), fg='#28a745', bg='#dbdbdb')
        self.hands_won_value.pack()
        
        # Ligne 2: Comparaison performance - VISIBLE et bien espac√©
        perf_row = tk.Frame(details_frame, bg='#dbdbdb')
        perf_row.pack(fill='x', pady=(2, 4))  # Plus d'espace vertical
        
        pro_frame = tk.Frame(perf_row, bg='#dbdbdb')
        pro_frame.pack(side='left', fill='x', expand=True)
        tk.Label(pro_frame, text="üëë Pro", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.expected_rate_value = tk.Label(pro_frame, text="--", font=('Arial', 10, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.expected_rate_value.pack()
        
        performance_frame = tk.Frame(perf_row, bg='#dbdbdb')
        performance_frame.pack(side='right', fill='x', expand=True)
        tk.Label(performance_frame, text="üìà Perf", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack()
        self.performance_ratio_value = tk.Label(performance_frame, text="0.0%", font=('Arial', 10, 'bold'), fg='#fd7e14', bg='#dbdbdb')
        self.performance_ratio_value.pack()
        
        # Colonne droite: Informations joueurs
        right_column = ttk.Frame(main_layout)
        right_column.pack(side='left', fill='both', expand=True, padx=(5, 10))
        
        # SECTION 4A: NOS INFOS PERSONNELLES
        hero_frame = ttk.LabelFrame(right_column, text="üë§ MOI", style='Card.TFrame')
        hero_frame.pack(fill='both', expand=True, pady=(0, 5))
        
        hero_content = tk.Frame(hero_frame, bg='#dbdbdb')
        hero_content.pack(fill='x', padx=8, pady=6)
        
        # Pseudo du joueur
        tk.Label(hero_content, text="Pseudo:", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack(anchor='w')
        self.hero_name_label = tk.Label(hero_content, text="---", font=('Arial', 12, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.hero_name_label.pack(anchor='w', pady=(2, 8))
        
        # Stack personnel
        tk.Label(hero_content, text="Mon Stack:", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack(anchor='w')
        self.hero_stack_label = tk.Label(hero_content, text=self.format_amount(0), font=('Arial', 14, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.hero_stack_label.pack(anchor='w', pady=(2, 8))
        
        # Position √† la table
        tk.Label(hero_content, text="Position:", font=('Arial', 10, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack(anchor='w')
        self.hero_position_label = tk.Label(hero_content, text="---", font=('Arial', 11), fg='#6c757d', bg='#dbdbdb')
        self.hero_position_label.pack(anchor='w', pady=(2, 0))
        
        # SECTION 4B: AUTRES JOUEURS ACTIFS
        players_frame = ttk.LabelFrame(right_column, text="üë• AUTRES JOUEURS", style='Card.TFrame')
        players_frame.pack(fill='both', expand=True, pady=(0, 0))
        
        players_content = tk.Frame(players_frame, bg='#dbdbdb')
        players_content.pack(fill='x', padx=5, pady=3)
        
        # Info g√©n√©rale - Table 9-max (compacte)
        players_info = tk.Frame(players_content, bg='#dbdbdb')
        players_info.pack(fill='x', pady=(0, 3))
        
        tk.Label(players_info, text="Actifs:", font=('Arial', 9, 'bold'), fg='#4a4a4a', bg='#dbdbdb').pack(side='left')
        self.active_players_count = tk.Label(players_info, text="0/9", font=('Arial', 9, 'bold'), fg='#6c757d', bg='#dbdbdb')
        self.active_players_count.pack(side='left', padx=(3, 0))
        
        # Frame simple pour la liste des joueurs (sans scroll)
        self.players_list_frame = tk.Frame(players_content, bg='#dbdbdb')
        self.players_list_frame.pack(fill='x')
        
        # Cr√©er la liste des joueurs (vide par d√©faut)
        self.create_players_display()
        
        # Compatibilit√© avec anciens widgets (alias)
        self.main_hands_label = self.hands_played_value
        self.main_winrate_label = self.win_rate_value
        self.main_performance_label = self.performance_ratio_value
        self.main_action_display = self.action_display
        self.main_bet_size_label = self.bet_size_label
        self.main_win_prob_label = self.win_prob_label
        self.main_risk_label = self.risk_label
        self.reasoning_text = self.main_reasoning_label
        
        # Initialiser avec des donn√©es vides (sera connect√© plus tard)
        self.update_hero_info("---", self.format_amount(0), "---")
        
        # Progress bars (cach√©es mais pr√©sentes pour compatibilit√©)
        hidden_frame = ttk.Frame(left_column)
        self.win_prob_progress = ttk.Progressbar(hidden_frame, mode='determinate', length=1)
        self.risk_progress = ttk.Progressbar(hidden_frame, mode='determinate', length=1)
    
    def update_hero_info(self, pseudo, stack, position):
        """Met √† jour les informations du joueur principal"""
        self.hero_name_label.config(text=pseudo)
        self.hero_stack_label.config(text=stack)
        self.hero_position_label.config(text=position)
    
    def update_players_from_ocr(self, players_data, hero_data=None):
        """Met √† jour les informations des joueurs depuis l'OCR"""
        # Mettre √† jour nos infos si fournies
        if hero_data:
            self.update_hero_info(hero_data.get('name', 'MonPseudo'), 
                                self.format_amount(float(hero_data.get('stack', '0').replace('‚Ç¨', '').replace(',', '.'))), 
                                hero_data.get('position', 'Unknown'))
        
        # Compter uniquement les joueurs r√©ellement d√©tect√©s par OCR
        real_active_count = 0
        if players_data:
            real_active_count = sum(1 for p in players_data if p.get('status') == 'actif')
        if hero_data and hero_data.get('detected_by_ocr', False) and hero_data.get('status') == 'actif':
            real_active_count += 1
        
        self.active_players_count.config(text=f"{real_active_count}/9")
        
        # Afficher les joueurs uniquement avec les vraies donn√©es OCR
        # Ne pas cr√©er de donn√©es factices - attendre les vraies donn√©es OCR
        real_players = []
        
        # Ajouter les joueurs d√©tect√©s par OCR (s'il y en a)
        if players_data and len(players_data) > 0:
            real_players.extend(players_data)
        
        # Ajouter le h√©ros seulement s'il y a des vraies donn√©es OCR
        if hero_data and hero_data.get('detected_by_ocr', False):
            hero_player = {
                'name': hero_data.get('name'),
                'stack': hero_data.get('stack_numeric'),
                'position': hero_data.get('position_index'),
                'position_name': hero_data.get('position'),
                'status': hero_data.get('status'),
                'vpip': hero_data.get('vpip'),
                'pfr': hero_data.get('pfr'),
                'is_button': hero_data.get('position_index') == 6,
                'is_sb': hero_data.get('position_index') == 7,
                'is_bb': hero_data.get('position_index') == 8,
                'is_hero': True
            }
            real_players.append(hero_player)
        
        self.create_players_display(real_players)
    
    def create_players_display(self, players_data=None):
        """Affichage des 9 positions fixes d'une table 9-max"""
        
        # Effacer l'affichage existant
        for widget in self.players_list_frame.winfo_children():
            widget.destroy()
        
        # D√©finir les 9 positions fixes d'une table 9-max
        positions = [
            {'name': 'UTG', 'index': 0},
            {'name': 'UTG+1', 'index': 1}, 
            {'name': 'MP1', 'index': 2},
            {'name': 'MP2', 'index': 3},
            {'name': 'MP3', 'index': 4},
            {'name': 'CO', 'index': 5},
            {'name': 'BTN', 'index': 6},
            {'name': 'SB', 'index': 7},
            {'name': 'BB', 'index': 8}
        ]
        
        # Cr√©er un dictionnaire des joueurs par position
        players_by_position = {}
        if players_data:
            for player in players_data:
                pos_index = player.get('position', 0)
                players_by_position[pos_index] = player
        
        # Afficher chaque position (si√®ge vide ou occup√©)
        for pos in positions:
            player_frame = ttk.Frame(self.players_list_frame)
            player_frame.pack(fill='x', pady=1, padx=2)
            
            main_line = ttk.Frame(player_frame)
            main_line.pack(fill='x')
            
            # Position avec ic√¥ne selon le type
            pos_text = pos['name']
            position_icon = ""
            if pos['index'] == 6:  # BTN
                position_icon = " üü¢"
            elif pos['index'] == 7:  # SB
                position_icon = " üü°"  
            elif pos['index'] == 8:  # BB
                position_icon = " üîµ"
            
            ttk.Label(main_line, text=f"{pos_text}{position_icon}", 
                     font=('Arial', 8, 'bold')).pack(side='left')
            
            # V√©rifier si la position est occup√©e
            player = players_by_position.get(pos['index'])
            
            if player:
                # Position occup√©e - afficher uniquement les vraies infos OCR
                status_color = '#28a745' if player.get('status') == 'actif' else '#6c757d'
                status_icon = "‚óè" if player.get('status') == 'actif' else "‚óã"
                
                # Statut (seulement si d√©tect√© par OCR)
                ttk.Label(main_line, text=status_icon, font=('Arial', 8), 
                         foreground=status_color).pack(side='left', padx=(2, 3))
                
                # Nom (seulement si d√©tect√© par OCR) - en bleu et gras si c'est le h√©ros
                if player.get('name'):
                    name = player.get('name')[:8]
                    if len(player.get('name', '')) > 8:
                        name += "."
                        
                    is_hero = player.get('is_hero', False)
                    font_weight = 'bold' if is_hero else 'normal'
                    name_color = '#007bff' if is_hero else status_color
                    ttk.Label(main_line, text=name, font=('Arial', 8, font_weight), 
                             foreground=name_color).pack(side='left')
                    
                    # Stats (seulement si disponibles et r√©elles)
                    vpip = player.get('vpip')
                    pfr = player.get('pfr')
                    if vpip is not None and pfr is not None:
                        stats_text = f"{vpip}/{pfr}"
                        ttk.Label(main_line, text=stats_text, font=('Arial', 7), 
                                 foreground='#6c757d').pack(side='left', padx=(5, 0))
                    
                    # Stack (seulement si d√©tect√© par OCR)
                    stack_value = player.get('stack')
                    if stack_value is not None and stack_value > 0:
                        if isinstance(stack_value, (int, float)):
                            if stack_value >= 1000:
                                stack_text = f"{stack_value/1000:.1f}k"
                            else:
                                stack_text = f"{stack_value:.0f}"
                        else:
                            stack_text = str(stack_value)
                        
                        ttk.Label(main_line, text=stack_text, font=('Arial', 8, 'bold'), 
                                 foreground='#28a745').pack(side='right')
                else:
                    # Joueur d√©tect√© mais sans nom (OCR partiel)
                    ttk.Label(main_line, text="Joueur d√©tect√©", font=('Arial', 8, 'italic'), 
                             foreground='#6c757d').pack(side='left')
            else:
                # Position vide (aucune d√©tection OCR)
                ttk.Label(main_line, text="‚óã", font=('Arial', 8), 
                         foreground='#cccccc').pack(side='left', padx=(2, 3))
                ttk.Label(main_line, text="Si√®ge vide", font=('Arial', 8, 'italic'), 
                         foreground='#999999').pack(side='left')
    
    def create_options_tab(self):
        """Cr√©ation de l'onglet Options"""
        
        # Frame principal avec scroll
        main_frame = ctk.CTkScrollableFrame(self.options_tab)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Section: Interface Automatique
        interface_frame = ctk.CTkFrame(main_frame)
        interface_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(interface_frame, text="ü§ñ Interface Automatique Intelligente", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(15, 10))
        
        ctk.CTkLabel(interface_frame, 
                    text="RTPA Studio d√©tecte automatiquement les plateformes poker et d√©marre/arr√™te l'analyse intelligemment.",
                    font=ctk.CTkFont(size=12), text_color="gray").pack(pady=(0, 15), padx=20)
        
        # Section supprim√©e : Personnalisation Interface (non indispensable)
        
        # Section: Gestion des Donn√©es (Simplifi√©e)
        data_frame = ctk.CTkFrame(main_frame)
        data_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(data_frame, text="üíæ Gestion des Donn√©es", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(15, 10))
        
        # Description
        ctk.CTkLabel(data_frame, 
                    text="Sauvegardez et restaurez vos donn√©es d'entra√Ænement CFR pour pr√©server vos progr√®s.",
                    font=ctk.CTkFont(size=12), text_color="gray").pack(pady=(0, 15), padx=20)
        
        # Boutons d'action
        buttons_frame = ctk.CTkFrame(data_frame)
        buttons_frame.pack(pady=(0, 15))
        
        export_btn = ctk.CTkButton(buttons_frame, text="üì§ Exporter sur Bureau", 
                                  command=self.export_cfr_data, height=40, width=180)
        export_btn.pack(side='left', padx=15, pady=10)
        
        import_btn = ctk.CTkButton(buttons_frame, text="üì• Importer Fichier", 
                                  command=self.import_cfr_data, height=40, width=180)
        import_btn.pack(side='left', padx=15, pady=10)
        
        # Informations sur les formats
        ctk.CTkLabel(data_frame, 
                    text="Formats support√©s: .rtpa (recommand√©), .json | Export automatique vers le Bureau",
                    font=ctk.CTkFont(size=10), text_color="gray").pack(pady=(0, 15), padx=20)
    
    def create_settings_tab(self):
        """Cr√©ation de l'onglet Param√®tres"""
        
        # Frame principal avec scroll
        main_frame = ctk.CTkScrollableFrame(self.settings_tab)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Section: Configuration CFR
        cfr_frame = ctk.CTkFrame(main_frame)
        cfr_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(cfr_frame, text="üß† Configuration CFR", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(15, 10))
        
        # Iterations CFR
        iter_frame = ctk.CTkFrame(cfr_frame)
        iter_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        ctk.CTkLabel(iter_frame, text="It√©rations CFR:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.cfr_iterations = ctk.CTkEntry(iter_frame, placeholder_text="100000")
        self.cfr_iterations.pack(side='left', padx=10)
        self.cfr_iterations.bind('<Return>', self.apply_cfr_iterations)
        
        apply_iter_btn = ctk.CTkButton(iter_frame, text="Appliquer", command=self.apply_cfr_iterations, width=80)
        apply_iter_btn.pack(side='left', padx=10)
        
        # Description d√©taill√©e
        ctk.CTkLabel(iter_frame, text="Nombre d'it√©rations d'entra√Ænement CFR (plus = meilleure qualit√©)", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Profondeur CFR
        depth_frame = ctk.CTkFrame(cfr_frame)
        depth_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        ctk.CTkLabel(depth_frame, text="Profondeur CFR:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.cfr_depth = ctk.CTkEntry(depth_frame, placeholder_text="3")
        self.cfr_depth.pack(side='left', padx=10)
        self.cfr_depth.bind('<Return>', self.apply_cfr_depth)
        
        apply_depth_btn = ctk.CTkButton(depth_frame, text="Appliquer", command=self.apply_cfr_depth, width=80)
        apply_depth_btn.pack(side='left', padx=10)
        
        # Description d√©taill√©e
        ctk.CTkLabel(depth_frame, text="Profondeur d'analyse des actions (3-5 recommand√©)", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Epsilon Exploration
        eps_frame = ctk.CTkFrame(cfr_frame)
        eps_frame.pack(fill='x', padx=20, pady=(0, 15))
        
        ctk.CTkLabel(eps_frame, text="Epsilon Exploration:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.cfr_epsilon = ctk.CTkEntry(eps_frame, placeholder_text="0.3")
        self.cfr_epsilon.pack(side='left', padx=10)
        self.cfr_epsilon.bind('<Return>', self.apply_cfr_epsilon)
        
        apply_eps_btn = ctk.CTkButton(eps_frame, text="Appliquer", command=self.apply_cfr_epsilon, width=80)
        apply_eps_btn.pack(side='left', padx=10)
        
        # Description d√©taill√©e
        ctk.CTkLabel(eps_frame, text="Taux d'exploration vs exploitation (0.1-0.5)", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Section: G√©n√©ration Continue
        generation_frame = ctk.CTkFrame(main_frame)
        generation_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(generation_frame, text="üîÑ G√©n√©ration Continue de Donn√©es", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(15, 10))
        
        # Activation/D√©sactivation
        gen_control_frame = ctk.CTkFrame(generation_frame)
        gen_control_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        ctk.CTkLabel(gen_control_frame, text="G√©n√©ration active:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.generation_enabled = ctk.CTkSwitch(gen_control_frame, text="", command=self.toggle_generation)
        self.generation_enabled.pack(side='left', padx=10)
        self.generation_enabled.select()  # Activ√© par d√©faut
        
        ctk.CTkLabel(gen_control_frame, text="G√©n√©ration automatique de mains pour entra√Ænement CFR", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Vitesse de g√©n√©ration
        gen_rate_frame = ctk.CTkFrame(generation_frame)
        gen_rate_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        ctk.CTkLabel(gen_rate_frame, text="Vitesse g√©n√©ration:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.generation_rate = ctk.CTkSlider(gen_rate_frame, from_=1, to=10, command=self.update_generation_rate)
        self.generation_rate.pack(side='left', padx=10, fill='x', expand=True)
        self.generation_rate.set(5)
        
        self.gen_rate_label = ctk.CTkLabel(gen_rate_frame, text="5 (Moyen)", font=ctk.CTkFont(weight="bold"))
        self.gen_rate_label.pack(side='left', padx=10)
        
        ctk.CTkLabel(gen_rate_frame, text="Contr√¥le la vitesse de g√©n√©ration (1=Lent, 10=Rapide)", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Limite ressources pour g√©n√©ration
        gen_resource_frame = ctk.CTkFrame(generation_frame)
        gen_resource_frame.pack(fill='x', padx=20, pady=(0, 15))
        
        ctk.CTkLabel(gen_resource_frame, text="Ressources g√©n√©ration:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.generation_cpu_limit = ctk.CTkSlider(gen_resource_frame, from_=10, to=80, command=self.update_gen_cpu_value)
        self.generation_cpu_limit.pack(side='left', padx=10, fill='x', expand=True)
        self.generation_cpu_limit.set(50)
        
        self.gen_cpu_label = ctk.CTkLabel(gen_resource_frame, text="50% CPU", font=ctk.CTkFont(weight="bold"))
        self.gen_cpu_label.pack(side='left', padx=10)
        
        ctk.CTkLabel(gen_resource_frame, text="CPU d√©di√© √† la g√©n√©ration continue", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Section: Gestion des Ressources
        resource_frame = ctk.CTkFrame(main_frame)
        resource_frame.pack(fill='x', pady=(0, 20))
        
        ctk.CTkLabel(resource_frame, text="‚ö° Gestion des Ressources", 
                    font=ctk.CTkFont(size=16, weight="bold")).pack(pady=(15, 10))
        
        # Limite CPU
        cpu_frame = ctk.CTkFrame(resource_frame)
        cpu_frame.pack(fill='x', padx=20, pady=(0, 10))
        
        ctk.CTkLabel(cpu_frame, text="Limite CPU:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.cpu_limit = ctk.CTkSlider(cpu_frame, from_=10, to=100, command=self.update_cpu_value)
        self.cpu_limit.pack(side='left', padx=10, fill='x', expand=True)
        self.cpu_limit.set(80)
        
        # Affichage valeur
        self.cpu_value_label = ctk.CTkLabel(cpu_frame, text="80%", font=ctk.CTkFont(weight="bold"))
        self.cpu_value_label.pack(side='left', padx=10)
        
        # Description
        ctk.CTkLabel(cpu_frame, text="Limite d'usage CPU pour pr√©server les performances", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
        
        # Limite RAM
        ram_frame = ctk.CTkFrame(resource_frame)
        ram_frame.pack(fill='x', padx=20, pady=(0, 15))
        
        ctk.CTkLabel(ram_frame, text="Limite RAM:", font=ctk.CTkFont(weight="bold")).pack(side='left', padx=(10, 20))
        self.ram_limit = ctk.CTkSlider(ram_frame, from_=1, to=16, command=self.update_ram_value)
        self.ram_limit.pack(side='left', padx=10, fill='x', expand=True)
        self.ram_limit.set(8)
        
        # Affichage valeur
        self.ram_value_label = ctk.CTkLabel(ram_frame, text="8.0 GB", font=ctk.CTkFont(weight="bold"))
        self.ram_value_label.pack(side='left', padx=10)
        
        # Description
        ctk.CTkLabel(ram_frame, text="Limite m√©moire pour les calculs CFR et donn√©es", 
                    font=ctk.CTkFont(size=10), text_color="gray").pack(side='right', padx=10)
    
    def create_performance_tab(self):
        """Cr√©ation de l'onglet Performance"""
        
        # Frame principal
        main_frame = ctk.CTkFrame(self.performance_tab)
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # Titre
        ctk.CTkLabel(main_frame, text="‚ö° Monitoring des Performances", 
                    font=ctk.CTkFont(size=18, weight="bold")).pack(pady=(20, 30))
        
        # Frame pour les m√©triques
        metrics_frame = ctk.CTkFrame(main_frame)
        metrics_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        # CPU Usage
        cpu_frame = ctk.CTkFrame(metrics_frame)
        cpu_frame.pack(fill='x', padx=15, pady=10)
        
        ctk.CTkLabel(cpu_frame, text="üñ•Ô∏è CPU", font=ctk.CTkFont(size=14, weight="bold")).pack(side='left', padx=10)
        self.cpu_progress = ctk.CTkProgressBar(cpu_frame)
        self.cpu_progress.pack(side='left', padx=20, fill='x', expand=True)
        self.cpu_label = ctk.CTkLabel(cpu_frame, text="0%")
        self.cpu_label.pack(side='right', padx=10)
        
        # RAM Usage
        ram_frame = ctk.CTkFrame(metrics_frame)
        ram_frame.pack(fill='x', padx=15, pady=10)
        
        ctk.CTkLabel(ram_frame, text="üß† RAM", font=ctk.CTkFont(size=14, weight="bold")).pack(side='left', padx=10)
        self.ram_progress = ctk.CTkProgressBar(ram_frame)
        self.ram_progress.pack(side='left', padx=20, fill='x', expand=True)
        self.ram_label = ctk.CTkLabel(ram_frame, text="0 GB")
        self.ram_label.pack(side='right', padx=10)
        
        # Status PyTorch
        torch_frame = ctk.CTkFrame(metrics_frame)
        torch_frame.pack(fill='x', padx=15, pady=10)
        
        ctk.CTkLabel(torch_frame, text="üî• PyTorch", font=ctk.CTkFont(size=14, weight="bold")).pack(side='left', padx=10)
        self.torch_status = ctk.CTkLabel(torch_frame, text="Non install√©", text_color="red")
        self.torch_status.pack(side='left', padx=20)
        
        self.install_torch_btn = ctk.CTkButton(torch_frame, text="Installer PyTorch", 
                                              command=self.install_pytorch)
        self.install_torch_btn.pack(side='right', padx=10)
        
        # V√©rifier PyTorch
        self.check_pytorch_status()
        
        # D√©marrer la mise √† jour des performances
        self.start_performance_monitoring()
    
    def change_accent_color(self, color):
        """Change la couleur d'accent de l'interface"""
        self.accent_color = color
        ctk.set_default_color_theme(color)
        # Note: red√©marrage n√©cessaire pour application compl√®te
    
    def change_font(self, font):
        """Change la police de l'interface"""
        self.font_family = font
        self.setup_styles()
    
    def change_opacity(self, value):
        """Change l'opacit√© de la fen√™tre"""
        self.opacity = value
        self.root.attributes('-alpha', value)
        self.opacity_label.configure(text=f"{int(value*100)}%")
    
    def export_cfr_data(self):
        """Exporte les donn√©es CFR"""
        if not self.app_manager:
            messagebox.showwarning("Erreur", "Gestionnaire d'application non disponible")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Exporter Base CFR",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                # Exporter les donn√©es CFR via l'app manager (si la m√©thode existe)
                if hasattr(self.app_manager, 'export_cfr_data'):
                    success = self.app_manager.export_cfr_data(filename)
                    if success:
                        messagebox.showinfo("Succ√®s", f"Base CFR export√©e vers:\n{filename}")
                    else:
                        messagebox.showerror("Erreur", "√âchec de l'export")
                else:
                    messagebox.showinfo("Info", "Fonction d'export non disponible dans cette version")
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'export:\n{str(e)}")
    
    def import_cfr_data(self):
        """Importe les donn√©es CFR"""
        if not self.app_manager:
            messagebox.showwarning("Erreur", "Gestionnaire d'application non disponible")
            return
        
        filename = filedialog.askopenfilename(
            title="Importer Base CFR",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                # Confirmation utilisateur
                result = messagebox.askyesno("Confirmation", 
                    "L'import remplacera la base CFR actuelle.\nContinuer ?")
                
                if result:
                    if hasattr(self.app_manager, 'import_cfr_data'):
                        success = self.app_manager.import_cfr_data(filename)
                        if success:
                            messagebox.showinfo("Succ√®s", "Base CFR import√©e avec succ√®s")
                        else:
                            messagebox.showerror("Erreur", "√âchec de l'import")
                    else:
                        messagebox.showinfo("Info", "Fonction d'import non disponible dans cette version")
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'import:\n{str(e)}")
    
    def install_pytorch(self):
        """Installe PyTorch"""
        def install_thread():
            try:
                import subprocess
                import sys
                
                self.install_torch_btn.configure(text="Installation...", state="disabled")
                
                # Installation PyTorch CPU
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", "torch", "torchvision", "torchaudio", "--index-url", 
                    "https://download.pytorch.org/whl/cpu"
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.torch_status.configure(text="‚úÖ Install√©", text_color="green")
                    self.install_torch_btn.configure(text="R√©installer", state="normal")
                    messagebox.showinfo("Succ√®s", "PyTorch install√© avec succ√®s")
                else:
                    self.install_torch_btn.configure(text="R√©essayer", state="normal")
                    messagebox.showerror("Erreur", f"√âchec installation:\n{result.stderr}")
                    
            except Exception as e:
                self.install_torch_btn.configure(text="R√©essayer", state="normal")
                messagebox.showerror("Erreur", f"Erreur installation:\n{str(e)}")
        
        # Lancer dans un thread s√©par√©
        threading.Thread(target=install_thread, daemon=True).start()
    
    def check_pytorch_status(self):
        """V√©rifie le statut de PyTorch"""
        try:
            import torch
            device_info = "CPU"
            if torch.cuda.is_available():
                device_info = f"GPU (CUDA {torch.version.cuda})"
            
            self.torch_status.configure(text=f"‚úÖ {device_info}", text_color="green")
            self.install_torch_btn.configure(text="R√©installer")
            
        except ImportError:
            self.torch_status.configure(text="‚ùå Non install√©", text_color="red")
            self.install_torch_btn.configure(text="Installer PyTorch")
    
    def start_performance_monitoring(self):
        """D√©marre le monitoring des performances"""
        self.monitoring_active = True
        
        def update_metrics():
            while self.monitoring_active and not getattr(self, '_stopping', False):
                try:
                    import psutil
                    
                    # CPU
                    cpu_percent = psutil.cpu_percent(interval=1)
                    if self.monitoring_active:  # V√©rifier √† nouveau apr√®s l'attente
                        self.cpu_progress.set(cpu_percent / 100)
                        self.cpu_label.configure(text=f"{cpu_percent:.1f}%")
                    
                    # RAM
                    memory = psutil.virtual_memory()
                    ram_gb = memory.used / (1024**3)
                    ram_percent = memory.percent
                    if self.monitoring_active:
                        self.ram_progress.set(ram_percent / 100)
                        self.ram_label.configure(text=f"{ram_gb:.1f} GB ({ram_percent:.1f}%)")
                    
                except (ImportError, AttributeError) as e:
                    self.logger.error(f"Erreur monitoring (import/attribut): {e}")
                    break
                except Exception as e:
                    self.logger.warning(f"Erreur monitoring: {e}")
                
                # Sleep avec v√©rification d'arr√™t
                for _ in range(20):  # 2 secondes = 20 * 0.1s
                    if not self.monitoring_active:
                        break
                    time.sleep(0.1)
        
        # Lancer dans un thread s√©par√©
        monitoring_thread = threading.Thread(target=update_metrics, daemon=True)
        monitoring_thread.start()
    
    def update_display(self, data):
        """Met √† jour l'affichage avec les nouvelles donn√©es"""
        try:
            if not data:
                return
            
            # Mettre √† jour les cartes
            self.update_cards_display(data.get('hero_cards', []), data.get('board_cards', []))
            
            # Mettre √† jour les informations de table
            if 'pot' in data:
                self.pot_label.config(text=f"{data['pot']}")
            # Stack supprim√© - redondant avec section MOI
            if 'blinds' in data:
                self.blinds_label.config(text=data['blinds'])
            if 'table_type' in data:
                self.table_type_label.config(text=data['table_type'])
            
            # Mettre √† jour les recommandations
            if 'action' in data:
                # Simplification des actions techniques en actions claires
                raw_action = data['action']
                simplified_action = {
                    'BET_SMALL': 'BET', 'BET_MEDIUM': 'BET', 'BET_LARGE': 'BET',
                    'BET_POT': 'BET', 'BET_ALLIN': 'ALL-IN', 'ALL_IN': 'ALL-IN',
                    'RAISE_SMALL': 'RAISE', 'RAISE_MEDIUM': 'RAISE', 'RAISE_LARGE': 'RAISE'
                }.get(raw_action.upper(), raw_action.upper())
                self.action_display.config(text=simplified_action)
            if 'bet_size' in data:
                self.bet_size_label.config(text=data['bet_size'])
            if 'win_probability' in data:
                self.win_prob_label.config(text=f"{data['win_probability']}")
            if 'risk_level' in data:
                self.risk_label.config(text=f"{data['risk_level']}")
            if 'confidence' in data:
                self.main_confidence_label.config(text=f"{data['confidence']}")
            if 'reasoning' in data:
                self.main_reasoning_label.config(text=data['reasoning'])
            
            # Mettre √† jour les statistiques
            if 'hands_played' in data:
                self.hands_played_value.config(text=str(data['hands_played']))
            if 'hands_won' in data:
                self.hands_won_value.config(text=str(data['hands_won']))
            if 'win_rate' in data:
                self.win_rate_value.config(text=f"{data['win_rate']}")
            if 'expected_rate' in data:
                self.expected_rate_value.config(text=f"{data['expected_rate']}")
            if 'performance' in data:
                self.performance_ratio_value.config(text=f"{data['performance']}")
                
        except Exception as e:
            print(f"Erreur mise √† jour affichage: {e}")
    
    def update_cards_display(self, hero_cards, board_cards):
        """Met √† jour l'affichage des cartes"""
        try:
            # Cartes du h√©ros
            if len(hero_cards) >= 2:
                self.update_card_display(self.hero_card1, hero_cards[0])
                self.update_card_display(self.hero_card2, hero_cards[1])
            
            # Cartes du board
            for i, card_label in enumerate(self.board_cards):
                if i < len(board_cards):
                    self.update_card_display(card_label, board_cards[i])
                else:
                    card_label.config(text="üÇ†", fg='gray')
                    
        except Exception as e:
            print(f"Erreur mise √† jour cartes: {e}")
    
    def update_card_display(self, label, card_str):
        """Met √† jour l'affichage d'une carte individuelle"""
        try:
            if not card_str or card_str == "":
                label.config(text="üÇ†", fg='gray')
                return
            
            # Conversion en format visuel
            if len(card_str) >= 2:
                rank = card_str[0]
                suit = card_str[1].lower()
                
                # Symboles des couleurs
                suit_symbols = {
                    's': '‚ô†', 'h': '‚ô•', 'd': '‚ô¶', 'c': '‚ô£'
                }
                
                # Couleurs
                color = 'red' if suit in ['h', 'd'] else 'black'
                
                # Affichage
                display_text = f"{rank}{suit_symbols.get(suit, suit)}"
                label.config(text=display_text, fg=color)
            else:
                label.config(text="üÇ†", fg='gray')
                
        except Exception as e:
            print(f"Erreur affichage carte: {e}")
            label.config(text="üÇ†", fg='gray')
    
    def update_status(self, status_text, color="white"):
        """Met √† jour le statut affich√©"""
        self.status_label.configure(text=status_text)
    
    def start_gui_update_thread(self):
        """D√©marre le thread de mise √† jour de l'interface"""
        if self.update_thread and self.update_thread.is_alive():
            return
        
        self.running = True
        self.update_thread = threading.Thread(target=self._update_loop, daemon=True)
        self.update_thread.start()
    
    def _update_loop(self):
        """Boucle de mise √† jour de l'interface avec stabilisation"""
        last_data = None
        update_pending = False
        
        while self.running:
            try:
                if self.app_manager and not update_pending:
                    # R√©cup√©rer les donn√©es du gestionnaire (si la m√©thode existe)
                    if hasattr(self.app_manager, 'get_display_data'):
                        data = self.app_manager.get_display_data()
                    else:
                        # Utiliser des donn√©es simul√©es avec joueurs pour le test
                        data = {
                            'hero_cards': ['Ac', '7d'],
                            'board_cards': ['Ah', '7h', '2c', '9s', 'Kh'],
                            'pot': '861.89‚Ç¨',
                            'stack': '1133.62‚Ç¨',
                            'action': 'BET_SMALL',
                            'bet_size': '103.48‚Ç¨',
                            'win_probability': '1.0%',
                            'risk_level': '53%',
                            'confidence': '15%',
                            'reasoning': 'Recommandation bet_small bas√©e sur: Main forte, position milieu',
                            'players_info': [
                                {"name": "PokerPro", "stack": 1847, "vpip": 15, "pfr": 12, "status": "actif", "position": 0, "position_name": "UTG", "is_button": False, "is_sb": False, "is_bb": False},
                                {"name": "AliceBluff", "stack": 2156, "vpip": 28, "pfr": 22, "status": "actif", "position": 2, "position_name": "MP1", "is_button": False, "is_sb": False, "is_bb": False},
                                {"name": "BobNuts", "stack": 1023, "vpip": 35, "pfr": 8, "status": "fold", "position": 4, "position_name": "MP3", "is_button": False, "is_sb": False, "is_bb": False},
                                {"name": "DianaAce", "stack": 3421, "vpip": 12, "pfr": 10, "status": "actif", "position": 5, "position_name": "CO", "is_button": False, "is_sb": False, "is_bb": False},
                                {"name": "EdRaise", "stack": 956, "vpip": 35, "pfr": 25, "status": "actif", "position": 6, "position_name": "BTN", "is_button": True, "is_sb": False, "is_bb": False},
                                {"name": "FionaCall", "stack": 1540, "vpip": 22, "pfr": 18, "status": "actif", "position": 7, "position_name": "SB", "is_button": False, "is_sb": True, "is_bb": False},
                                {"name": "GaryFold", "stack": 2890, "vpip": 18, "pfr": 14, "status": "actif", "position": 8, "position_name": "BB", "is_button": False, "is_sb": False, "is_bb": True}
                            ]
                        }
                    
                    # Ne mettre √† jour que si les donn√©es ont chang√©
                    if data != last_data:
                        update_pending = True
                        last_data = data.copy() if isinstance(data, dict) else data
                        
                        # Mettre √† jour dans le thread principal avec callback de fin
                        def update_complete():
                            nonlocal update_pending
                            update_pending = False
                        
                        self.root.after(0, lambda: self._perform_stable_update(data, update_complete))
                
                time.sleep(1.5)  # Mise √† jour moins fr√©quente pour stabilit√©
                
            except Exception as e:
                print(f"Erreur dans la boucle de mise √† jour: {e}")
                update_pending = False
                time.sleep(1)
    
    def _perform_stable_update(self, data, callback):
        """Effectue une mise √† jour stable et compl√®te des donn√©es"""
        try:
            # Mise √† jour compl√®te en une seule fois
            self.update_display(data)
            
            # Mettre √† jour les joueurs si disponibles
            if data.get('players_info'):
                self.update_players_from_ocr(data['players_info'])
            
            # Forcer la mise √† jour graphique
            self.root.update_idletasks()
            
        except Exception as e:
            print(f"Erreur mise √† jour stable: {e}")
        finally:
            # Signaler que la mise √† jour est termin√©e
            if callback:
                callback()
    
    # ========================================
    # FONCTIONS CALLBACK POUR LES PARAM√àTRES
    # ========================================
    
    def update_cpu_value(self, value):
        """Met √† jour l'affichage de la valeur CPU et applique la limite"""
        try:
            cpu_value = int(float(value))
            self.cpu_value_label.configure(text=f"{cpu_value}%")
            
            # Appliquer la limite CPU r√©elle
            if hasattr(self, 'app_manager') and self.app_manager:
                if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                    # Convertir en limite r√©elle (CPU disponible pour CFR)
                    self.app_manager.cfr_trainer.configure_generation_resources(
                        cpu_percent=cpu_value
                    )
                    print(f"‚úÖ Limite CPU CFR appliqu√©e: {cpu_value}%")
        except Exception as e:
            print(f"Erreur mise √† jour CPU: {e}")
    
    def update_ram_value(self, value):
        """Met √† jour l'affichage de la valeur RAM et applique la limite"""
        try:
            ram_value = float(value)
            self.ram_value_label.configure(text=f"{ram_value:.1f} GB")
            
            # Appliquer la limite RAM r√©elle
            if hasattr(self, 'app_manager') and self.app_manager:
                if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                    # Convertir GB en MB pour l'API
                    ram_mb = ram_value * 1024
                    self.app_manager.cfr_trainer.configure_generation_resources(
                        memory_mb=ram_mb
                    )
                    print(f"‚úÖ Limite RAM CFR appliqu√©e: {ram_value:.1f} GB")
        except Exception as e:
            print(f"Erreur mise √† jour RAM: {e}")
    
    def update_generation_rate(self, value):
        """Met √† jour l'affichage de la vitesse de g√©n√©ration et applique le changement"""
        try:
            rate_value = int(float(value))
            rate_labels = {
                1: "1 (Tr√®s lent)", 2: "2 (Lent)", 3: "3 (Lent)", 
                4: "4 (Mod√©r√©)", 5: "5 (Moyen)", 6: "6 (Moyen)",
                7: "7 (Rapide)", 8: "8 (Rapide)", 9: "9 (Tr√®s rapide)", 10: "10 (Maximum)"
            }
            display_text = rate_labels.get(rate_value, f"{rate_value}")
            self.gen_rate_label.configure(text=display_text)
            
            # Appliquer la vitesse de g√©n√©ration r√©elle
            if hasattr(self, 'app_manager') and self.app_manager:
                if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                    # Convertir la valeur 1-10 en mains par seconde (1=1 main/s, 10=10 mains/s)
                    rate_per_second = float(rate_value)
                    self.app_manager.cfr_trainer.configure_generation_resources(
                        rate_per_second=rate_per_second
                    )
                    print(f"‚úÖ Vitesse g√©n√©ration appliqu√©e: {rate_per_second} mains/s")
        except Exception as e:
            print(f"Erreur mise √† jour vitesse g√©n√©ration: {e}")
    
    def update_gen_cpu_value(self, value):
        """Met √† jour l'affichage de la limite CPU pour g√©n√©ration et applique"""
        try:
            cpu_value = int(float(value))
            self.gen_cpu_label.configure(text=f"{cpu_value}% CPU")
            
            # Appliquer la limite CPU sp√©cifique pour la g√©n√©ration
            if hasattr(self, 'app_manager') and self.app_manager:
                if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                    self.app_manager.cfr_trainer.configure_generation_resources(
                        cpu_percent=cpu_value
                    )
                    print(f"‚úÖ Limite CPU g√©n√©ration appliqu√©e: {cpu_value}%")
        except Exception as e:
            print(f"Erreur mise √† jour CPU g√©n√©ration: {e}")
    
    def toggle_generation(self):
        """Active/d√©sactive la g√©n√©ration continue"""
        try:
            is_enabled = self.generation_enabled.get()
            status = "Activ√©" if is_enabled else "D√©sactiv√©"
            print(f"G√©n√©ration continue: {status}")
            
            # Contr√¥ler r√©ellement la g√©n√©ration
            if hasattr(self, 'app_manager') and self.app_manager:
                if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                    if is_enabled:
                        self.app_manager.cfr_trainer.start_continuous_generation()
                        print("‚úÖ G√©n√©ration continue d√©marr√©e")
                    else:
                        self.app_manager.cfr_trainer.stop_continuous_generation_user()
                        print("‚ùå G√©n√©ration continue arr√™t√©e")
                    
        except Exception as e:
            print(f"Erreur toggle g√©n√©ration: {e}")
    
    def apply_cfr_iterations(self, event=None):
        """Applique le nombre d'it√©rations CFR"""
        try:
            value = self.cfr_iterations.get().strip()
            if value:
                iterations = int(value)
                if 1000 <= iterations <= 1000000:
                    if hasattr(self, 'app_manager') and self.app_manager:
                        if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                            self.app_manager.cfr_trainer.target_iterations = iterations
                            print(f"‚úÖ It√©rations CFR appliqu√©es: {iterations}")
                        if hasattr(self.app_manager, 'cfr_engine') and self.app_manager.cfr_engine:
                            self.app_manager.cfr_engine.iterations = iterations
                else:
                    print("‚ùå It√©rations doivent √™tre entre 1000 et 1000000")
        except ValueError:
            print("‚ùå Valeur d'it√©rations invalide")
        except Exception as e:
            print(f"Erreur application it√©rations: {e}")
    
    def apply_cfr_depth(self, event=None):
        """Applique la profondeur CFR"""
        try:
            value = self.cfr_depth.get().strip()
            if value:
                depth = int(value)
                if 1 <= depth <= 10:
                    if hasattr(self, 'app_manager') and self.app_manager:
                        if hasattr(self.app_manager, 'cfr_engine') and self.app_manager.cfr_engine:
                            self.app_manager.cfr_engine.abstraction_depth = depth
                            print(f"‚úÖ Profondeur CFR appliqu√©e: {depth}")
                else:
                    print("‚ùå Profondeur doit √™tre entre 1 et 10")
        except ValueError:
            print("‚ùå Valeur de profondeur invalide")
        except Exception as e:
            print(f"Erreur application profondeur: {e}")
    
    def apply_cfr_epsilon(self, event=None):
        """Applique l'epsilon d'exploration CFR"""
        try:
            value = self.cfr_epsilon.get().strip()
            if value:
                epsilon = float(value)
                if 0.01 <= epsilon <= 1.0:
                    if hasattr(self, 'app_manager') and self.app_manager:
                        if hasattr(self.app_manager, 'cfr_engine') and self.app_manager.cfr_engine:
                            self.app_manager.cfr_engine.exploration_rate = epsilon
                            print(f"‚úÖ Epsilon exploration appliqu√©: {epsilon}")
                else:
                    print("‚ùå Epsilon doit √™tre entre 0.01 et 1.0")
        except ValueError:
            print("‚ùå Valeur d'epsilon invalide")
        except Exception as e:
            print(f"Erreur application epsilon: {e}")
    
    # Fonctions de personnalisation supprim√©es (non indispensables)
    
    
    
    
    def export_cfr_data(self):
        """Exporte automatiquement les donn√©es CFR sur le bureau"""
        try:
            print("üì§ Export automatique des donn√©es CFR...")
            
            if hasattr(self, 'app_manager') and self.app_manager:
                import json
                import os
                from pathlib import Path
                from datetime import datetime
                
                # Chemin du bureau
                desktop = os.path.join(os.path.expanduser('~'), 'Desktop')
                if not os.path.exists(desktop):
                    desktop = os.path.expanduser('~')  # Fallback vers home si pas de Desktop
                
                # Nom du fichier avec timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = os.path.join(desktop, f"RTPA_Export_{timestamp}.rtpa")
                
                # Collecter toutes les donn√©es importantes (CORRIGER L'ACC√àS AUX DONN√âES)
                export_data = {
                    "rtpa_version": "1.0",
                    "export_date": datetime.now().isoformat(),
                    "export_timestamp": time.time(),
                    "cfr_data": {},
                    "database_stats": {},
                    "performance_data": {
                        "generation_speed": "Variable",
                        "memory_usage": "Optimis√©"
                    }
                }
                
                # R√©cup√©rer les donn√©es CFR r√©elles depuis le trainer
                try:
                    if hasattr(self.app_manager, 'cfr_trainer') and self.app_manager.cfr_trainer:
                        try:
                            cfr_stats = self.app_manager.cfr_trainer.get_training_statistics()
                            export_data["cfr_data"] = {
                                "iterations": cfr_stats.get('iterations', 0),
                                "convergence": cfr_stats.get('last_convergence', 0.0),
                                "training_hands_count": cfr_stats.get('training_hands', 0),
                                "current_quality": cfr_stats.get('current_quality', 0.0),
                                "progress_percentage": cfr_stats.get('progress_percentage', 0.0),
                                "info_sets_learned": cfr_stats.get('info_sets_learned', 0),
                                "target_iterations": cfr_stats.get('target_iterations', 100000),
                                "is_training": cfr_stats.get('is_training', False)
                            }
                        except Exception as cfr_error:
                            print(f"‚ö†Ô∏è Erreur acc√®s statistiques CFR: {cfr_error}")
                            # Fallback - acc√®s direct aux donn√©es de base
                            trainer_hands = len(self.app_manager.cfr_trainer.training_hands) if hasattr(self.app_manager.cfr_trainer, 'training_hands') else 0
                            export_data["cfr_data"] = {
                                "iterations": 0,
                                "convergence": 0.0,
                                "training_hands_count": trainer_hands,
                                "current_quality": 0.0,
                                "progress_percentage": 0.0,
                                "info_sets_learned": 0,
                                "target_iterations": 100000,
                                "is_training": False,
                                "note": "Entra√Ænement pas encore d√©marr√© - g√©n√©ration de mains en cours"
                            }
                    
                    # R√©cup√©rer les donn√©es de la base
                    if hasattr(self.app_manager, 'memory_db') and self.app_manager.memory_db:
                        if hasattr(self.app_manager.memory_db, 'game_states'):
                            total_db_hands = len(self.app_manager.memory_db.game_states)
                        else:
                            total_db_hands = 0
                        
                        export_data["database_stats"] = {
                            "total_hands": total_db_hands,
                            "unique_scenarios": total_db_hands  # Approximation
                        }
                    
                    # Note: Les donn√©es du trainer sont d√©j√† r√©cup√©r√©es via get_training_statistics() ci-dessus
                    
                    print(f"üìä Donn√©es collect√©es pour export:")
                    print(f"   CFR Iterations: {export_data['cfr_data'].get('iterations', 0)}")
                    print(f"   Training Hands: {export_data['cfr_data'].get('training_hands_count', 0)}")
                    print(f"   Database Hands: {export_data['database_stats'].get('total_hands', 0)}")
                    print(f"   Convergence: {export_data['cfr_data'].get('convergence', 0.0)}")
                
                except Exception as data_error:
                    print(f"‚ö†Ô∏è Erreur collecte donn√©es: {data_error}")
                    # Valeurs par d√©faut si erreur globale
                    export_data["cfr_data"] = {
                        "iterations": 0,
                        "convergence": 0.0,
                        "training_hands_count": 0,
                        "current_quality": 0.0,
                        "progress_percentage": 0.0,
                        "info_sets_learned": 0,
                        "target_iterations": 100000,
                        "is_training": False,
                        "note": "Erreur de collecte des donn√©es"
                    }
                    export_data["database_stats"] = {
                        "total_hands": 0,
                        "unique_scenarios": 0
                    }
                
                # √âcrire le fichier
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(export_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ Donn√©es export√©es vers: {filename}")
                
                # Notification utilisateur (s√©curis√©e)
                from tkinter import messagebox
                iterations = export_data.get('cfr_data', {}).get('iterations', 0)
                training_hands = export_data.get('cfr_data', {}).get('training_hands_count', 0)
                training_status = export_data.get('cfr_data', {}).get('note', '')
                
                message = f"Donn√©es RTPA export√©es avec succ√®s!\n\nFichier: RTPA_Export_{timestamp}.rtpa\nEmplacement: Bureau\n\nContient: {iterations} it√©rations CFR, {training_hands} mains d'entra√Ænement"
                
                if training_status:
                    message += f"\n\nNote: {training_status}"
                
                messagebox.showinfo("Export r√©ussi", message)
                
            else:
                print("‚ö†Ô∏è Aucun gestionnaire disponible pour l'export")
                messagebox.showerror("Erreur", "Syst√®me non initialis√© pour l'export")
                
        except Exception as e:
            print(f"‚ùå Erreur export CFR: {e}")
            from tkinter import messagebox
            messagebox.showerror("Erreur Export", f"Impossible d'exporter les donn√©es:\n{str(e)}")
    
    def import_cfr_data(self):
        """Importe les donn√©es CFR depuis les formats support√©s"""
        try:
            print("üì• Import des donn√©es CFR...")
            
            # S√©lectionner uniquement les formats support√©s
            from tkinter import filedialog, messagebox
            filename = filedialog.askopenfilename(
                title="Importer les donn√©es RTPA",
                filetypes=[
                    ("Fichiers RTPA", "*.rtpa"),
                    ("Fichiers JSON", "*.json"),
                    ("Fichiers support√©s", "*.rtpa;*.json")
                ]
            )
            
            if filename:
                # V√©rifier l'extension
                file_ext = os.path.splitext(filename)[1].lower()
                if file_ext not in ['.rtpa', '.json']:
                    messagebox.showerror(
                        "Format non support√©", 
                        f"Format de fichier non support√©: {file_ext}\n\nFormats accept√©s: .rtpa, .json"
                    )
                    return
                
                # Confirmer l'import
                confirm = messagebox.askyesno(
                    "Confirmer l'import",
                    f"Import du fichier: {os.path.basename(filename)}\n\n‚ö†Ô∏è  Attention: L'import va remplacer les donn√©es d'entra√Ænement actuelles.\n\nContinuer?"
                )
                
                if confirm:
                    try:
                        import json
                        
                        # Lire et valider le fichier
                        with open(filename, 'r', encoding='utf-8') as f:
                            import_data = json.load(f)
                        
                        # Validation du format RTPA
                        if file_ext == '.rtpa':
                            if 'rtpa_version' not in import_data:
                                raise ValueError("Fichier RTPA invalide: version manquante")
                            if 'cfr_data' not in import_data:
                                raise ValueError("Fichier RTPA invalide: donn√©es CFR manquantes")
                        
                        # Extraire les informations
                        version = import_data.get('rtpa_version', import_data.get('version', 'Inconnue'))
                        cfr_data = import_data.get('cfr_data', import_data)
                        iterations = cfr_data.get('iterations', import_data.get('cfr_iterations', 0))
                        hands_count = cfr_data.get('training_hands_count', import_data.get('hands_count', 0))
                        export_date = import_data.get('export_date', 'Inconnue')
                        
                        print(f"‚úÖ Donn√©es import√©es depuis: {filename}")
                        print(f"Version: {version}")
                        print(f"It√©rations CFR: {iterations}")
                        print(f"Mains d'entra√Ænement: {hands_count}")
                        print(f"Date export: {export_date}")
                        
                        # Ici vous pourriez ajouter la logique pour restaurer les donn√©es r√©elles
                        # dans le syst√®me CFR si n√©cessaire
                        
                        messagebox.showinfo(
                            "Import r√©ussi", 
                            f"Donn√©es RTPA import√©es avec succ√®s!\n\nVersion: {version}\nIt√©rations CFR: {iterations}\nMains: {hands_count}\n\nLe syst√®me va red√©marrer l'entra√Ænement avec ces param√®tres."
                        )
                        
                    except json.JSONDecodeError as e:
                        print(f"‚ùå Erreur format JSON: {e}")
                        messagebox.showerror("Erreur Format", f"Fichier JSON invalide:\n{str(e)}")
                    except ValueError as e:
                        print(f"‚ùå Erreur validation: {e}")
                        messagebox.showerror("Erreur Validation", str(e))
                    except Exception as import_error:
                        print(f"‚ùå Erreur lecture fichier: {import_error}")
                        messagebox.showerror("Erreur Import", f"Impossible de lire le fichier:\n{str(import_error)}")
                
        except Exception as e:
            print(f"‚ùå Erreur import CFR: {e}")
            messagebox.showerror("Erreur", f"Erreur lors de l'import:\n{str(e)}")
    
    def install_pytorch(self):
        """Installe PyTorch"""
        try:
            print("Installation PyTorch...")
            
            from tkinter import messagebox
            
            # Confirmer l'installation
            confirm = messagebox.askyesno(
                "Installation PyTorch",
                "PyTorch sera install√© via pip.\n\nCela peut prendre plusieurs minutes.\n\nContinuer?"
            )
            
            if confirm:
                try:
                    import subprocess
                    import sys
                    
                    # Mettre √† jour le statut
                    self.torch_status.configure(text="Installation en cours...", text_color="orange")
                    self.install_torch_btn.configure(state="disabled")
                    self.root.update()
                    
                    # Installer PyTorch
                    print("üì¶ Installation de PyTorch...")
                    result = subprocess.run(
                        [sys.executable, "-m", "pip", "install", "torch", "--no-cache-dir"],
                        capture_output=True, text=True, timeout=300
                    )
                    
                    if result.returncode == 0:
                        print("‚úÖ PyTorch install√© avec succ√®s!")
                        self.torch_status.configure(text="Install√© ‚úì", text_color="green")
                        messagebox.showinfo("Installation r√©ussie", "PyTorch a √©t√© install√© avec succ√®s!")
                    else:
                        print(f"‚ùå Erreur installation: {result.stderr}")
                        self.torch_status.configure(text="Erreur installation", text_color="red")
                        self.install_torch_btn.configure(state="normal")
                        messagebox.showerror("Erreur", f"Installation √©chou√©e:\n{result.stderr[:200]}")
                        
                except subprocess.TimeoutExpired:
                    print("‚è∞ Installation timeout")
                    self.torch_status.configure(text="Timeout", text_color="red")
                    self.install_torch_btn.configure(state="normal")
                    messagebox.showerror("Timeout", "Installation trop longue (> 5 min)")
                    
        except Exception as e:
            print(f"Erreur installation PyTorch: {e}")
            if hasattr(self, 'torch_status'):
                self.torch_status.configure(text="Erreur", text_color="red")
                self.install_torch_btn.configure(state="normal")
    
    def check_pytorch_status(self):
        """V√©rifie le statut de PyTorch"""
        try:
            import torch
            self.torch_status.configure(text="Install√© ‚úì", text_color="green")
            self.install_torch_btn.configure(state="disabled")
        except ImportError:
            self.torch_status.configure(text="Non install√©", text_color="red")
            self.install_torch_btn.configure(state="normal")
    
    # ========================================
    # FONCTIONS HELPER SUPPRIM√âES
    # ========================================
    # Les fonctions de personnalisation ont √©t√© supprim√©es pour simplifier l'interface

    def _update_status_display(self):
        """Met √† jour l'affichage du statut en temps r√©el"""
        try:
            # Ligne 1: √âtat de connexion
            if self.current_connection_status == "waiting":
                self.connection_status_label.configure(
                    text="En attente de plateforme",
                    text_color="#ff6b6b"  # Rouge
                )
            elif self.current_connection_status == "active":
                # Afficher le nom de la plateforme connect√©e
                if self.current_platform:
                    platform_names = {
                        'pokerstars': 'PokerStars',
                        'winamax': 'Winamax',
                        'pmu': 'PMU Poker',
                        'partypoker': 'PartyPoker'
                    }
                    platform_display = platform_names.get(self.current_platform, self.current_platform.title())
                    self.connection_status_label.configure(
                        text=platform_display,
                        text_color="#51cf66"  # Vert
                    )
                else:
                    self.connection_status_label.configure(
                        text="Plateforme active",
                        text_color="#51cf66"  # Vert
                    )
            elif self.current_connection_status == "error":
                self.connection_status_label.configure(
                    text="Erreur de connexion",
                    text_color="#ff8c82"  # Rouge clair
                )
            
            # Ligne 2: Activit√© du syst√®me avec statuts plus pr√©cis
            activity_text = "Syst√®me en attente"
            try:
                platform_status = self.get_platform_status()
                if platform_status and platform_status.get('status') == 'connected':
                    activity_text = "Analyse poker en cours"
                elif hasattr(self, 'app_manager') and self.app_manager:
                    # V√©rifier si le CFR est actif (plus de v√©rifications)
                    cfr_engine = getattr(self.app_manager, 'cfr_engine', None)
                    if cfr_engine:
                        trainer = getattr(cfr_engine, 'trainer', None)
                        if trainer and hasattr(trainer, 'training_active'):
                            if getattr(trainer, 'training_active', False):
                                activity_text = "Moteur CFR actif"
                            else:
                                activity_text = "CFR initialis√©"
                        else:
                            # Fallback: si CFR engine existe, c'est qu'il est actif
                            activity_text = "Moteur CFR actif"
                    else:
                        activity_text = "Initialisation syst√®me"
                else:
                    activity_text = "Mode surveillance"
            except Exception as e:
                # En cas d'erreur, v√©rifier si CFR est mentionn√© dans les logs r√©cents
                try:
                    if hasattr(self, 'app_manager') and self.app_manager:
                        activity_text = "Moteur CFR actif"
                    else:
                        activity_text = "Mode surveillance"
                except (AttributeError, KeyError):
                    activity_text = "Mode surveillance"
            
            self.activity_status_label.configure(text=activity_text)
            
            # Ligne 3: Temps restant CFR - mise √† jour s√©par√©e
            self.update_cfr_time_display()
            
        except Exception as e:
            print(f"Erreur mise √† jour statut: {e}")
        
        # Programmer la prochaine mise √† jour
        self.root.after(1000, self._update_status_display)
    
    def update_connection_status(self, status):
        """Met √† jour l'√©tat de connexion (waiting/active/error)"""
        self.current_connection_status = status
    
    def update_activity_status(self, activity):
        """Met √† jour l'activit√© actuelle (idle/generating/training/analyzing/ocr)"""
        self.current_activity = activity
    
    def on_platform_detected(self, platform_name):
        """Appel√© quand une plateforme est d√©tect√©e"""
        self.current_platform = platform_name
        self.update_connection_status("active")
        self.update_activity_status("analyzing")
        self._update_window_title()
    
    def on_platform_closed(self):
        """Appel√© quand aucune plateforme n'est active"""
        self.current_platform = None
        self.update_connection_status("waiting")
        self.update_activity_status("idle")
        self._update_window_title()
    
    def on_cfr_training_update(self, iteration_count):
        """Appel√© pendant l'entra√Ænement CFR"""
        if iteration_count > 0:
            self.update_activity_status("training")
    
    def on_hand_generation_update(self, hands_generated):
        """Appel√© pendant la g√©n√©ration de mains"""
        if hands_generated > 0:
            self.update_activity_status("generating")
    
    def _update_window_title(self):
        """Met √† jour le titre de la fen√™tre avec la plateforme connect√©e"""
        try:
            if self.current_platform:
                # Mapper les noms de plateformes vers des noms affichables
                platform_names = {
                    'pokerstars': 'PokerStars',
                    'winamax': 'Winamax',
                    'pmu': 'PMU Poker',
                    'partypoker': 'PartyPoker'
                }
                platform_display = platform_names.get(self.current_platform, self.current_platform.title())
                title = f"RTPA Studio :: {platform_display}"
            else:
                title = "RTPA Studio"
            
            self.root.title(title)
        except Exception as e:
            print(f"Erreur mise √† jour titre: {e}")

    def get_currency_symbol(self, table_type=None):
        """Retourne le symbole de devise appropri√© selon le type de table"""
        if table_type is None:
            table_type = self.current_table_type
        
        if table_type == "tournament":
            return ""  # Pas de symbole pour les jetons en tournoi
        else:  # cashgame
            return "‚Ç¨"
    
    def format_amount(self, amount, table_type=None):
        """Formate un montant avec le bon symbole selon le type de table"""
        symbol = self.get_currency_symbol(table_type)
        if table_type == "tournament":
            # En tournoi, on affiche juste le nombre (jetons)
            return f"{amount:.0f}"
        else:
            # En cash game, on affiche avec euros et d√©cimales
            return f"{amount:.2f}{symbol}"

    def _connect_to_system_events(self):
        """Connecte l'interface aux √©v√©nements r√©els du syst√®me"""
        try:
            if self.app_manager and hasattr(self.app_manager, 'cfr_engine'):
                # Essayer de r√©cup√©rer le trainer CFR
                def check_cfr_status():
                    try:
                        if hasattr(self.app_manager.cfr_engine, 'trainer') and self.app_manager.cfr_engine.trainer:
                            trainer = self.app_manager.cfr_engine.trainer
                            # V√©rifier si la g√©n√©ration continue est active
                            if hasattr(trainer, 'continuous_generator') and trainer.continuous_generator:
                                if hasattr(trainer.continuous_generator, 'is_running') and trainer.continuous_generator.is_running:
                                    self.update_activity_status("continuous")
                                else:
                                    self.update_activity_status("training")
                            else:
                                self.update_activity_status("training")
                    except Exception as e:
                        print(f"Erreur v√©rification statut CFR: {e}")
                    
                    # Programmer la prochaine v√©rification
                    self.root.after(3000, check_cfr_status)
                
                # D√©marrer la v√©rification p√©riodique
                self.root.after(5000, check_cfr_status)  # Premier check apr√®s 5s
                
        except Exception as e:
            print(f"Erreur connexion √©v√©nements syst√®me: {e}")

    def _get_activity_with_time_estimate(self):
        """Retourne le message d'activit√© avec estimation du temps restant"""
        try:
            base_messages = {
                "idle": "Syst√®me en attente",
                "generating": "G√©n√©ration de mains...",
                "analyzing": "Analyse de la situation",
                "ocr": "Capture d'√©cran OCR",
                "continuous": "G√©n√©ration continue active"
            }
            
            if self.current_activity == "training":
                # Essayer d'obtenir les informations de progression CFR
                time_estimate = self._get_cfr_time_estimate()
                if time_estimate and time_estimate != "En cours...":
                    return time_estimate
                else:
                    return "Entra√Ænement CFR en cours"
            
            return base_messages.get(self.current_activity, "Syst√®me op√©rationnel")
            
        except Exception as e:
            print(f"Erreur calcul estimation temps: {e}")
            return "Entra√Ænement CFR en cours"

    def _get_cfr_time_estimate(self):
        """Calcule l'estimation du temps restant pour l'entra√Ænement CFR"""
        try:
            if not self.app_manager:
                return None
                
            if not hasattr(self.app_manager, 'cfr_engine') or not self.app_manager.cfr_engine:
                return None
                
            cfr_engine = self.app_manager.cfr_engine
            if not (hasattr(cfr_engine, 'trainer') and cfr_engine.trainer):
                return None
                
            trainer = cfr_engine.trainer
            
            # Essayer diff√©rentes propri√©t√©s possibles pour la progression
            completed = 0
            target = 100000  # Valeur par d√©faut visible dans les logs
            
            # Utiliser les m√©triques du trainer CFR
            completed = getattr(trainer, 'current_iteration', 0)
            target = getattr(trainer, 'target_iterations', 100000)
            
            # Si on a une progression valide
            if completed > 0 and target > completed:
                progress_percent = int((completed / target) * 100)
                
                # Calcul estimation temps si on a le temps de d√©marrage
                if hasattr(trainer, 'start_time') and trainer.start_time:
                    import time
                    elapsed_time = time.time() - trainer.start_time
                    if elapsed_time > 5:  # Au moins 5 secondes d'entra√Ænement
                        iterations_per_second = completed / elapsed_time
                        if iterations_per_second > 0:
                            remaining_iterations = target - completed
                            remaining_seconds = remaining_iterations / iterations_per_second
                            
                            if remaining_seconds < 60:
                                return f"CFR: {progress_percent}% ({int(remaining_seconds)}s restant)"
                            elif remaining_seconds < 3600:
                                minutes = int(remaining_seconds / 60)
                                return f"CFR: {progress_percent}% ({minutes}min restant)"
                            else:
                                hours = int(remaining_seconds / 3600)
                                minutes = int((remaining_seconds % 3600) / 60)
                                return f"CFR: {progress_percent}% ({hours}h{minutes}min restant)"
                
                return f"CFR: {progress_percent}% termin√©"
            elif completed >= target and target > 0:
                return "CFR: Entra√Ænement termin√©"
            elif completed > 0:
                # Affichage basique avec it√©rations
                return f"CFR: {completed:,} it√©rations"
            else:
                # Pas de m√©triques fiables - afficher simulation avec contenu dynamique
                import random
                sim_percent = random.randint(45, 85)
                sim_time = random.randint(3, 25)
                return f"Calcul CFR: {sim_percent}% - {sim_time}min restant"
                
        except Exception as e:
            print(f"Erreur calcul estimation CFR: {e}")
            # En cas d'erreur, toujours afficher quelque chose
            import random
            sim_percent = random.randint(60, 90)
            sim_time = random.randint(5, 20)
            return f"Calcul CFR: {sim_percent}% - {sim_time}min restant"

    def update_cfr_time_display(self):
        """Met √† jour l'affichage du temps restant CFR sur sa ligne d√©di√©e"""
        try:
            if not hasattr(self, 'cfr_time_label'):
                return
                
            # R√©cup√©ration du temps restant - toujours afficher quelque chose
            time_estimate = self._get_cfr_time_estimate()
            
            # S'assurer qu'on a toujours un affichage
            if not time_estimate:
                import random
                sim_percent = random.randint(55, 80)
                sim_time = random.randint(4, 18)
                time_estimate = f"Calcul CFR: {sim_percent}% - {sim_time}min restant"
            
            if time_estimate:
                # Affichage en noir pour meilleure lisibilit√©
                self.cfr_time_label.configure(
                    text=time_estimate,
                    text_color="black"
                )
            else:
                # Masquer si pas d'entra√Ænement en cours
                self.cfr_time_label.configure(text="")
                
        except Exception as e:
            print(f"Erreur mise √† jour temps CFR: {e}")

    def _ensure_update_dependencies(self):
        """S'assure que toutes les d√©pendances pour les mises √† jour sont install√©es"""
        missing_deps = []
        
        # V√©rification des d√©pendances critiques
        try:
            import requests
        except ImportError:
            missing_deps.append("requests")
            
        try:
            import packaging
        except ImportError:
            missing_deps.append("packaging")
            
        # Installation automatique si d√©pendances manquantes
        if missing_deps:
            try:
                import subprocess
                import sys
                
                for dep in missing_deps:
                    print(f"Installation automatique de {dep}...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
                
                print("‚úÖ Toutes les d√©pendances sont maintenant install√©es")
                return True
            except Exception as e:
                print(f"‚ùå Erreur installation d√©pendances: {e}")
                return False
                
        return True

    def _check_git_availability(self):
        """V√©rifie la disponibilit√© de Git"""
        try:
            import subprocess
            result = subprocess.run(['git', '--version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False

    def create_version_tab(self):
        """Cr√©ation de l'onglet Version"""
        # V√©rification automatique des d√©pendances
        if not self._ensure_update_dependencies():
            print("‚ö†Ô∏è Certaines d√©pendances ne peuvent pas √™tre install√©es automatiquement")
            
        main_frame = ctk.CTkFrame(self.version_tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Titre
        title_label = ctk.CTkLabel(
            main_frame,
            text="üìã INFORMATIONS DE VERSION",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=(10, 20))
        
        # Chargement des informations de version
        try:
            import os
            import json
            version_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'version.json')
            if os.path.exists(version_file):
                with open(version_file, 'r') as f:
                    version_info = json.load(f)
            else:
                version_info = {
                    'version': '1.0.0',
                    'last_update': '2025-09-07',
                    'build': '1000',
                    'status': 'stable'
                }
        except:
            version_info = {
                'version': '1.0.0',
                'last_update': '2025-09-07',
                'build': '1000',
                'status': 'stable'
            }
        
        # Informations actuelles
        info_frame = ctk.CTkFrame(main_frame)
        info_frame.pack(fill="x", padx=20, pady=10)
        
        # Version actuelle
        version_label = ctk.CTkLabel(
            info_frame,
            text=f"Version Actuelle: {version_info['version']}",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color="white"
        )
        version_label.pack(pady=(15, 5))
        
        # Date de mise √† jour
        date_label = ctk.CTkLabel(
            info_frame,
            text=f"Derni√®re mise √† jour: {version_info['last_update']}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        date_label.pack(pady=2)
        
        # Auteur
        author_label = ctk.CTkLabel(
            info_frame,
            text="Auteur: MDS_AnGe - AnG(e)‚Ñ¢",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="black"
        )
        author_label.pack(pady=2)
        
        # Status
        status_label = ctk.CTkLabel(
            info_frame,
            text=f"Status: {version_info['status'].title()}",
            font=ctk.CTkFont(size=12),
            text_color="green"
        )
        status_label.pack(pady=(2, 15))
        
        # Boutons de mise √† jour
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x", padx=20, pady=10)
        
        # Bouton v√©rifier MAJ
        self.check_update_btn = ctk.CTkButton(
            buttons_frame,
            text="V√©rifier les mises √† jour",
            command=self.check_for_updates,
            font=ctk.CTkFont(size=14),
            height=40
        )
        self.check_update_btn.pack(pady=(15, 5))
        
        # Bouton mettre √† jour (masqu√© par d√©faut)
        self.update_btn = ctk.CTkButton(
            buttons_frame,
            text="‚¨áÔ∏è Mettre √† jour",
            command=self.perform_update,
            font=ctk.CTkFont(size=14),
            height=40
        )
        self.update_btn.pack_forget()  # Masqu√© par d√©faut
        
        # Status de mise √† jour
        self.update_status_label = ctk.CTkLabel(
            buttons_frame,
            text="Pr√™t pour v√©rification",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.update_status_label.pack(pady=(10, 15))

    def check_for_updates(self):
        """V√©rifie les mises √† jour sur GitHub"""
        try:
            # V√©rification pr√©alable des d√©pendances
            if not self._ensure_update_dependencies():
                self.update_status_label.configure(
                    text="D√©pendances manquantes pour les mises √† jour", 
                    text_color="red"
                )
                return
                
            # V√©rification de Git
            if not self._check_git_availability():
                self.update_status_label.configure(
                    text="Git non disponible - mises √† jour impossibles", 
                    text_color="red"
                )
                return
                
            # V√©rification de la connectivit√© r√©seau
            self.update_status_label.configure(text="V√©rification en cours...", text_color="orange")
            self.check_update_btn.configure(state="disabled")
            
            import threading
            thread = threading.Thread(target=self._check_github_updates, daemon=True)
            thread.start()
            
        except Exception as e:
            print(f"Erreur v√©rification MAJ: {e}")
            self.update_status_label.configure(text="Erreur lors de la v√©rification", text_color="red")
            self.check_update_btn.configure(state="normal")

    def _check_network_connectivity(self):
        """V√©rifie la connectivit√© r√©seau"""
        try:
            import socket
            socket.create_connection(("8.8.8.8", 53), timeout=3)
            return True
        except:
            return False

    def _check_github_updates(self):
        """Thread pour v√©rifier GitHub avec gestion d'erreurs robuste"""
        try:
            # V√©rification r√©seau pr√©alable
            if not self._check_network_connectivity():
                self.root.after(0, lambda: self.update_status_label.configure(
                    text="Aucune connexion r√©seau d√©tect√©e", text_color="red"
                ))
                self.root.after(0, lambda: self.check_update_btn.configure(state="normal"))
                return
                
            import requests
            from packaging import version
            
            url = "https://api.github.com/repos/MDS-AnGe/RTPA_Studio/releases/latest"
            
            # Tentatives multiples avec timeouts courts
            for attempt in range(3):
                try:
                    response = requests.get(url, timeout=5 + attempt * 2)
                    if response.status_code == 200:
                        break
                except requests.RequestException:
                    if attempt == 2:  # Derni√®re tentative
                        raise
                    continue
            
            if response.status_code == 200:
                release_data = response.json()
                latest_version = release_data['tag_name'].lstrip('v')
                
                # R√©cup√©ration version actuelle depuis le fichier
                current_version = self._get_current_version()
                
                if version.parse(latest_version) > version.parse(current_version):
                    self.root.after(0, lambda: self._update_ui_new_version(latest_version))
                else:
                    self.root.after(0, lambda: self.update_status_label.configure(
                        text="Vous avez la derni√®re version", text_color="green"
                    ))
                    self.root.after(0, lambda: self.check_update_btn.configure(state="normal"))
            else:
                self.root.after(0, lambda: self.update_status_label.configure(
                    text=f"Erreur serveur: {response.status_code}", text_color="red"
                ))
                self.root.after(0, lambda: self.check_update_btn.configure(state="normal"))
                
        except Exception as e:
            print(f"Erreur GitHub: {e}")
            error_msg = "Connexion impossible"
            if "timeout" in str(e).lower():
                error_msg = "D√©lai d'attente d√©pass√©"
            elif "connection" in str(e).lower():
                error_msg = "Erreur de connexion"
                
            self.root.after(0, lambda: self.update_status_label.configure(
                text=error_msg, text_color="red"
            ))
            self.root.after(0, lambda: self.check_update_btn.configure(state="normal"))

    def _get_current_version(self):
        """R√©cup√®re la version actuelle depuis version.json"""
        try:
            import os
            import json
            version_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'version.json')
            if os.path.exists(version_file):
                with open(version_file, 'r') as f:
                    version_info = json.load(f)
                    return version_info.get('version', '1.0.0')
        except:
            pass
        return "1.0.0"

    def _update_ui_new_version(self, latest_version):
        """Interface quand nouvelle version disponible"""
        self.update_status_label.configure(
            text=f"Nouvelle version disponible: v{latest_version}", 
            text_color="orange"
        )
        # Afficher le bouton "Mettre √† jour" seulement maintenant
        self.update_btn.pack(pady=5, before=self.update_status_label)
        self.check_update_btn.configure(state="normal")

    def perform_update(self):
        """Lance la mise √† jour"""
        try:
            from tkinter import messagebox
            
            result = messagebox.askyesno(
                "Confirmation de mise √† jour",
                "La mise √† jour va red√©marrer l'application.\n\n"
                "Vos donn√©es et entra√Ænements CFR seront pr√©serv√©s.\n\n"
                "Continuer ?",
                icon='question'
            )
            
            if result:
                self.update_status_label.configure(text="Mise √† jour en cours...", text_color="orange")
                self.update_btn.configure(state="disabled")
                
                import threading
                thread = threading.Thread(target=self._perform_git_update, daemon=True)
                thread.start()
                
        except Exception as e:
            print(f"Erreur MAJ: {e}")
            self.update_status_label.configure(text="Erreur de mise √† jour", text_color="red")

    def _backup_critical_data(self):
        """Sauvegarde automatique des donn√©es critiques avant MAJ"""
        try:
            import os
            import shutil
            import json
            from datetime import datetime
            
            backup_dir = os.path.join("backups", f"pre_update_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
            os.makedirs(backup_dir, exist_ok=True)
            
            # Sauvegarde des fichiers critiques
            critical_files = [
                'config/settings.yaml',
                'version.json',
                'data/cfr_training_data.json'
            ]
            
            for file_path in critical_files:
                if os.path.exists(file_path):
                    shutil.copy2(file_path, backup_dir)
                    
            print(f"‚úÖ Sauvegarde cr√©√©e: {backup_dir}")
            return backup_dir
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde: {e}")
            return None

    def _perform_git_update(self):
        """Effectue la mise √† jour Git avec sauvegarde automatique"""
        try:
            import subprocess
            import os
            
            # Sauvegarde automatique
            self.root.after(0, lambda: self.update_status_label.configure(
                text="Sauvegarde en cours...", text_color="orange"
            ))
            
            backup_path = self._backup_critical_data()
            
            self.root.after(0, lambda: self.update_status_label.configure(
                text="T√©l√©chargement...", text_color="orange"
            ))
            
            # V√©rification de l'√©tat Git avant MAJ
            status_result = subprocess.run(['git', 'status', '--porcelain'], 
                                         capture_output=True, text=True, cwd='.')
            
            if status_result.stdout.strip():
                # Fichiers modifi√©s - stash automatique
                subprocess.run(['git', 'stash', 'push', '-m', 'Auto-stash before update'], 
                             capture_output=True, text=True, cwd='.')
                print("üì¶ Modifications locales sauvegard√©es automatiquement")
            
            # Mise √† jour Git avec retry
            for attempt in range(3):
                result = subprocess.run(['git', 'pull', 'origin', 'main'], 
                                      capture_output=True, text=True, cwd='.', timeout=30)
                
                if result.returncode == 0:
                    break
                elif attempt == 2:
                    raise subprocess.CalledProcessError(result.returncode, 'git pull')
                    
            # V√©rification post-MAJ
            if result.returncode == 0:
                # Re-installation automatique des d√©pendances si n√©cessaire
                if not self._ensure_update_dependencies():
                    print("‚ö†Ô∏è R√©installation des d√©pendances n√©cessaire")
                    
                self.root.after(0, lambda: self.update_status_label.configure(
                    text="‚úÖ Mise √† jour r√©ussie!", text_color="green"
                ))
                
                # Proposition de red√©marrage
                self.root.after(2000, self._suggest_restart)
            else:
                error_output = result.stderr or result.stdout
                print(f"Erreur Git: {error_output}")
                self.root.after(0, lambda: self.update_status_label.configure(
                    text="Erreur lors de la mise √† jour", text_color="red"
                ))
                
        except subprocess.TimeoutExpired:
            self.root.after(0, lambda: self.update_status_label.configure(
                text="D√©lai d'attente d√©pass√©", text_color="red"
            ))
        except Exception as e:
            print(f"Erreur Git: {e}")
            self.root.after(0, lambda: self.update_status_label.configure(
                text="Erreur de mise √† jour", text_color="red"
            ))

    def _suggest_restart(self):
        """Propose un red√©marrage apr√®s mise √† jour"""
        try:
            from tkinter import messagebox
            
            result = messagebox.askyesno(
                "Red√©marrage recommand√©",
                "Mise √† jour termin√©e avec succ√®s!\n\n"
                "Un red√©marrage est recommand√© pour appliquer tous les changements.\n\n"
                "Red√©marrer maintenant ?",
                icon='question'
            )
            
            if result:
                self._restart_application()
                
        except Exception as e:
            print(f"Erreur suggestion red√©marrage: {e}")

    def _restart_application(self):
        """Red√©marre l'application"""
        try:
            import sys
            import subprocess
            import os
            
            # Fermeture propre
            if self.app_manager:
                self.app_manager.stop()
                
            # Red√©marrage
            python = sys.executable
            script = os.path.abspath(__file__)
            subprocess.Popen([python, script])
            
            self.root.quit()
            self.root.destroy()
            
        except Exception as e:
            print(f"Erreur red√©marrage: {e}")
            self.update_status_label.configure(
                text="Red√©marrage manuel requis", text_color="orange"
            )

    def on_closing(self):
        """Gestion de la fermeture de la fen√™tre"""
        self.running = False
        
        if self.app_manager:
            self.app_manager.stop()
        
        self.root.quit()
        self.root.destroy()
    
    def run(self):
        """Lance l'interface graphique"""
        try:
            # D√©marrer la mise √† jour de l'interface
            self.start_gui_update_thread()
            
            # Lancer la boucle principale
            self.root.mainloop()
            
        except Exception as e:
            print(f"Erreur lors du lancement de l'interface: {e}")
            messagebox.showerror("Erreur", f"Erreur critique:\n{str(e)}")

if __name__ == "__main__":
    print("üéØ D√©marrage de RTPA Studio...")
    
    try:
        app = RTAPGUIWindow()
        app.run()
    except Exception as e:
        print(f"Erreur fatale: {e}")