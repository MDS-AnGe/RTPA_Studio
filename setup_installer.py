#!/usr/bin/env python3
"""
Installateur automatique pour RTPA Studio
Installation automatique de toutes les d√©pendances
"""

import os
import sys
import subprocess
import platform
import urllib.request
import zipfile
import shutil
from pathlib import Path

class RTAPInstaller:
    """Installateur automatique RTPA Studio"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.python_version = f"{sys.version_info.major}.{sys.version_info.minor}"
        self.errors = []
        
    def print_header(self):
        """Affiche l'en-t√™te d'installation"""
        print("üéØ RTPA STUDIO - INSTALLATEUR AUTOMATIQUE")
        print("=" * 55)
        print(f"Syst√®me: {platform.system()} {platform.release()}")
        print(f"Python: {sys.version}")
        print(f"Architecture: {platform.machine()}")
        print()
        print("‚ö†Ô∏è  AVERTISSEMENT IMPORTANT ‚ö†Ô∏è")
        print("Ce logiciel est con√ßu exclusivement √† des fins d'√©tude")
        print("et de recherche acad√©mique sur les algorithmes de poker.")
        print("Usage strictement √©ducatif et non-commercial.")
        print()
        
    def check_python_version(self):
        """V√©rifie la version Python"""
        print("üêç V√©rification version Python...")
        
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ requis")
            print(f"   Version actuelle: {self.python_version}")
            return False
        
        print(f"‚úÖ Python {self.python_version} OK")
        return True
    
    def install_tesseract(self):
        """Installe Tesseract OCR selon le syst√®me"""
        print("üëÅÔ∏è Installation Tesseract OCR...")
        
        try:
            # Test si Tesseract est d√©j√† install√©
            subprocess.run(['tesseract', '--version'], 
                         capture_output=True, check=True)
            print("‚úÖ Tesseract d√©j√† install√©")
            return True
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚è≥ Installation de Tesseract...")
            
            if self.system == "windows":
                return self._install_tesseract_windows()
            elif self.system == "darwin":  # macOS
                return self._install_tesseract_macos()
            elif self.system == "linux":
                return self._install_tesseract_linux()
            else:
                print(f"‚ùå Syst√®me non support√©: {self.system}")
                return False
    
    def _install_tesseract_windows(self):
        """Installation Tesseract sur Windows"""
        try:
            print("üì• T√©l√©chargement Tesseract Windows...")
            
            # URL de Tesseract pour Windows
            url = "https://github.com/UB-Mannheim/tesseract/releases/download/v5.3.3/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
            installer_path = "tesseract_installer.exe"
            
            urllib.request.urlretrieve(url, installer_path)
            
            print("üîß Lancement installation Tesseract...")
            print("‚ö†Ô∏è  Suivez les instructions √† l'√©cran")
            print("‚ö†Ô∏è  Assurez-vous d'ajouter Tesseract au PATH")
            
            subprocess.run([installer_path, '/S'], check=True)
            os.remove(installer_path)
            
            # Ajouter au PATH si n√©cessaire
            tesseract_path = r"C:\\Program Files\\Tesseract-OCR"
            if tesseract_path not in os.environ.get('PATH', ''):
                print("üìù Ajout de Tesseract au PATH...")
                current_path = os.environ.get('PATH', '')
                os.environ['PATH'] = f"{current_path};{tesseract_path}"
            
            print("‚úÖ Tesseract install√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur installation Tesseract: {e}")
            print("üîß Installation manuelle requise:")
            print("   1. T√©l√©chargez Tesseract: https://github.com/UB-Mannheim/tesseract/releases")
            print("   2. Installez en suivant les instructions")
            print("   3. Ajoutez Tesseract au PATH syst√®me")
            return False
    
    def _install_tesseract_macos(self):
        """Installation Tesseract sur macOS"""
        try:
            # Tenter avec Homebrew
            print("üç∫ Installation via Homebrew...")
            subprocess.run(['brew', 'install', 'tesseract'], check=True)
            print("‚úÖ Tesseract install√© via Homebrew")
            return True
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Homebrew non trouv√©")
            print("üîß Installation manuelle requise:")
            print("   1. Installez Homebrew: https://brew.sh")
            print("   2. Ex√©cutez: brew install tesseract")
            print("   Ou t√©l√©chargez depuis: https://github.com/tesseract-ocr/tesseract")
            return False
    
    def _install_tesseract_linux(self):
        """Installation Tesseract sur Linux"""
        try:
            # D√©tecter la distribution
            if os.path.exists('/etc/debian_version'):
                # Debian/Ubuntu
                print("üêß Installation via apt...")
                subprocess.run(['sudo', 'apt', 'update'], check=True)
                subprocess.run(['sudo', 'apt', 'install', '-y', 'tesseract-ocr'], check=True)
                
            elif os.path.exists('/etc/redhat-release'):
                # RedHat/CentOS/Fedora
                print("üé© Installation via yum/dnf...")
                try:
                    subprocess.run(['sudo', 'dnf', 'install', '-y', 'tesseract'], check=True)
                except:
                    subprocess.run(['sudo', 'yum', 'install', '-y', 'tesseract'], check=True)
                    
            elif os.path.exists('/etc/arch-release'):
                # Arch Linux
                print("üèπ Installation via pacman...")
                subprocess.run(['sudo', 'pacman', '-S', '--noconfirm', 'tesseract'], check=True)
                
            else:
                print("‚ùå Distribution Linux non reconnue")
                print("üîß Installez manuellement: sudo apt install tesseract-ocr")
                return False
            
            print("‚úÖ Tesseract install√© sur Linux")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur installation Tesseract: {e}")
            print("üîß Essayez manuellement: sudo apt install tesseract-ocr")
            return False
    
    def install_python_dependencies(self):
        """Installe les d√©pendances Python"""
        print("üì¶ Installation des d√©pendances Python...")
        
        # Liste des packages requis
        packages = [
            "numpy>=1.21.0",
            "opencv-python>=4.5.0",
            "pytesseract>=0.3.8",
            "pillow>=8.0.0",
            "customtkinter>=5.0.0",
            "mss>=6.1.0",
            "psutil>=5.8.0",
            "pyyaml>=6.0",
            "matplotlib>=3.5.0",
            "seaborn>=0.11.0",
            "scipy>=1.7.0",
            "numba>=0.56.0"
        ]
        
        try:
            # Mise √† jour pip
            print("‚¨ÜÔ∏è Mise √† jour pip...")
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                         check=True, capture_output=True)
            
            # Installation des packages
            for package in packages:
                print(f"üì• Installation {package}...")
                subprocess.run([sys.executable, '-m', 'pip', 'install', package], 
                             check=True, capture_output=True)
            
            print("‚úÖ Toutes les d√©pendances Python install√©es")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur installation d√©pendances: {e}")
            return False
    
    def setup_directories(self):
        """Cr√©e les r√©pertoires n√©cessaires"""
        print("üìÅ Cr√©ation des r√©pertoires...")
        
        directories = [
            "logs",
            "config",
            "attached_assets/generated_images",
            "exports"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ {directory}/")
        
        return True
    
    def configure_tesseract_path(self):
        """Configure le chemin Tesseract pour pytesseract"""
        print("‚öôÔ∏è Configuration Tesseract...")
        
        try:
            import pytesseract
            
            # Tentative de d√©tection automatique
            if self.system == "windows":
                possible_paths = [
                    r"C:\Program Files\Tesseract-OCR\tesseract.exe",
                    r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe",
                    r"C:\Users\{}\AppData\Local\Tesseract-OCR\tesseract.exe".format(os.getlogin())
                ]
                
                for path in possible_paths:
                    if os.path.exists(path):
                        pytesseract.pytesseract.tesseract_cmd = path
                        print(f"‚úÖ Tesseract configur√©: {path}")
                        return True
            
            # Test avec le PATH par d√©faut
            result = subprocess.run(['tesseract', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Tesseract accessible via PATH")
                return True
            
            print("‚ö†Ô∏è Tesseract peut n√©cessiter une configuration manuelle")
            return True
            
        except ImportError:
            print("‚ö†Ô∏è pytesseract non encore install√©")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Configuration Tesseract: {e}")
            return True
    
    def test_installation(self):
        """Test l'installation compl√®te"""
        print("üß™ Test de l'installation...")
        
        try:
            # Test imports Python
            import numpy
            import cv2
            import pytesseract
            from PIL import Image
            import customtkinter
            import mss
            import psutil
            import yaml
            
            print("‚úÖ Tous les modules Python import√©s")
            
            # Test Tesseract
            version = pytesseract.get_tesseract_version()
            print(f"‚úÖ Tesseract {version} fonctionnel")
            
            # Test cr√©ation image simple
            test_img = Image.new('RGB', (100, 50), 'white')
            text = pytesseract.image_to_string(test_img)
            print("‚úÖ OCR Tesseract op√©rationnel")
            
            # Test capture √©cran
            with mss.mss() as sct:
                screenshot = sct.grab({"top": 0, "left": 0, "width": 100, "height": 100})
                print("‚úÖ Capture d'√©cran fonctionnelle")
            
            print("üéâ Installation valid√©e avec succ√®s!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur test installation: {e}")
            return False
    
    def create_shortcuts(self):
        """Cr√©e les raccourcis de lancement"""
        print("üîó Cr√©ation des raccourcis...")
        
        # Script de lancement principal
        launcher_content = f'''#!/usr/bin/env python3
"""Lanceur RTPA Studio"""
import sys
import os

# Ajouter le r√©pertoire du projet au path
project_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_dir)

# Lancement interface graphique
if __name__ == "__main__":
    try:
        from main_gui import main
        main()
    except Exception as e:
        print(f"Erreur lancement RTPA Studio: {{e}}")
        input("Appuyez sur Entr√©e pour fermer...")
'''
        
        with open("rtpa_studio.py", "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        # Rendre ex√©cutable sur Unix
        if self.system in ["linux", "darwin"]:
            os.chmod("rtpa_studio.py", 0o755)
        
        print("‚úÖ Lanceur rtpa_studio.py cr√©√©")
        return True
    
    def show_final_instructions(self):
        """Affiche les instructions finales"""
        print()
        print("üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS!")
        print("=" * 45)
        print()
        print("üöÄ LANCEMENT DU LOGICIEL:")
        print("   python rtpa_studio.py          # Interface graphique compl√®te")
        print("   python main_gui.py             # Interface graphique")
        print("   python main_headless.py        # Mode d√©mo console")
        print("   python test_final.py           # Tests complets")
        print()
        print("üìã CALIBRAGE INITIAL:")
        print("   1. Lancez votre client poker (PokerStars, Winamax, PMU)")
        print("   2. Ouvrez une table de poker")
        print("   3. Lancez RTPA Studio")
        print("   4. Utilisez l'outil de calibrage pour ajuster les zones OCR")
        print()
        print("‚öôÔ∏è CONFIGURATION:")
        print("   ‚Ä¢ config/settings.yaml - Param√®tres g√©n√©raux")
        print("   ‚Ä¢ Onglet 'Configuration' - Zones OCR et clients poker")
        print("   ‚Ä¢ Onglet 'Performance' - Optimisations syst√®me")
        print()
        print("‚ö†Ô∏è  IMPORTANT:")
        print("   ‚Ä¢ Usage strictement √©ducatif et de recherche")
        print("   ‚Ä¢ Respectez les conditions d'utilisation des plateformes")
        print("   ‚Ä¢ Aucune injection de code dans les clients poker")
        print("   ‚Ä¢ Lecture passive uniquement via OCR")
        print()
        print("üìö DOCUMENTATION:")
        print("   ‚Ä¢ README.md - Guide complet d'utilisation")
        print("   ‚Ä¢ logs/ - Fichiers de logs pour debug")
        print("   ‚Ä¢ exports/ - Donn√©es export√©es")
        print()
    
    def run_installation(self):
        """Lance l'installation compl√®te"""
        self.print_header()
        
        success = True
        
        # V√©rifications pr√©alables
        if not self.check_python_version():
            return False
        
        # Installation Tesseract
        if not self.install_tesseract():
            success = False
            self.errors.append("Installation Tesseract √©chou√©e")
        
        # Installation d√©pendances Python
        if not self.install_python_dependencies():
            success = False
            self.errors.append("Installation d√©pendances Python √©chou√©e")
        
        # Configuration
        self.setup_directories()
        self.configure_tesseract_path()
        
        # Test final
        if success and not self.test_installation():
            success = False
            self.errors.append("Tests de validation √©chou√©s")
        
        # Finalisation
        if success:
            self.create_shortcuts()
            self.show_final_instructions()
        else:
            print("‚ùå INSTALLATION INCOMPL√àTE")
            print("Erreurs rencontr√©es:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        return success

if __name__ == "__main__":
    installer = RTAPInstaller()
    installer.run_installation()