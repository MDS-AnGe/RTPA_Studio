#!/usr/bin/env python3
"""
Test de la d√©tection Winamax am√©lior√©e
Teste la capacit√© de d√©tecter lobby et tables s√©par√©ment
"""

import sys
import os
sys.path.append('.')

def test_winamax_detection():
    """Test de la d√©tection Winamax am√©lior√©e"""
    
    print("üß™ Test de d√©tection Winamax am√©lior√©e")
    print("=" * 50)
    
    try:
        from src.utils.platform_detector import PlatformDetector
        
        detector = PlatformDetector()
        
        # Test 1: D√©tection g√©n√©rale
        print("\nüìä 1. D√©tection g√©n√©rale des plateformes:")
        detection_result = detector.force_detection()
        print(f"   Plateformes actives: {detection_result['platform_names']}")
        
        # Test 2: Informations d√©taill√©es
        print("\nüîç 2. Analyse d√©taill√©e:")
        detailed_info = detector.get_detection_info()
        
        print(f"   Processus trouv√©s: {len(detailed_info['all_processes'])}")
        print(f"   Processus correspondants: {detailed_info['matching_processes']}")
        
        if 'all_windows' in detailed_info:
            print(f"   Fen√™tres trouv√©es: {len(detailed_info['all_windows'])}")
            if detailed_info['matching_windows']:
                print(f"   Fen√™tres Winamax d√©tect√©es:")
                for window, platform in detailed_info['matching_windows']:
                    print(f"     - {window}")
        
        # Test 3: D√©tection sp√©cialis√©e Winamax
        print("\nüéØ 3. D√©tection sp√©cialis√©e Winamax:")
        winamax_info = detector.detect_winamax_tables()
        
        print(f"   Processus Winamax: {'‚úÖ' if winamax_info['process_detected'] else '‚ùå'}")
        print(f"   Lobby d√©tect√©: {'‚úÖ' if winamax_info['lobby_detected'] else '‚ùå'}")
        print(f"   Tables d√©tect√©es: {len(winamax_info['tables_detected'])}")
        
        if winamax_info['all_winamax_windows']:
            print(f"   Fen√™tres Winamax:")
            for window in winamax_info['all_winamax_windows']:
                print(f"     - {window}")
        
        if winamax_info['tables_detected']:
            print(f"   Tables sp√©cifiques:")
            for table in winamax_info['tables_detected']:
                print(f"     - {table}")
        
        # Recommandations
        print("\nüí° Recommandations:")
        if not winamax_info['process_detected']:
            print("   ‚ö†Ô∏è  Winamax n'est pas d√©tect√© - ouvrez le client")
        elif winamax_info['lobby_detected'] and not winamax_info['tables_detected']:
            print("   ‚ö†Ô∏è  Seul le lobby est ouvert - ouvrez une table")
        elif winamax_info['tables_detected']:
            print("   ‚úÖ Tables d√©tect√©es - RTPA devrait fonctionner")
        else:
            print("   ‚ùì √âtat incertain - v√©rifiez la configuration")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Test de d√©tection Winamax pour RTPA Studio")
    print("Assurez-vous que Winamax soit ouvert pour des tests complets\n")
    
    success = test_winamax_detection()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ Test termin√© avec succ√®s")
    else:
        print("‚ùå Test √©chou√©")
    
    input("\nAppuyez sur Entr√©e pour fermer...")